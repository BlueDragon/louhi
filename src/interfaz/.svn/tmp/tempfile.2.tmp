/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Interfaz.java
 *
 * Created on Jan 13, 2009, 5:10:31 PM
 */

package interfaz;

import control.AppController;
import control.NoSePudoException;
import control.LouhiHighlighter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import modelo.EntidadPDF;
import org.pdfbox.exceptions.CryptographyException;
import org.pdfbox.exceptions.InvalidPasswordException;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.util.HashMap;
import java.util.regex.*;
import javax.swing.JOptionPane;
import exceptions.DataBaseNotFoundException;
import java.util.LinkedList;
import javax.swing.event.DocumentListener;
import modelo.Location;
import util.OswaReader;
/**
 *
 * @author alos
 */
public class Interfaz extends javax.swing.JFrame {

    LinkedList<String> listaDeCitas = new LinkedList<String>();
<<<<<<< .mine
    LinkedList<modelo.TemporalReference> temporalReferences;//the references found
    int currentPage = 0;//a counter for the found references pages


=======
>>>>>>> .r288
    Vector citNodes=new Vector();//servira para el mapeo del formato de citas
    Vector nodeFormat=new Vector();//Creara el mapeo para el formato de nodos
    String citExample="";
    String nodeExample="";
    String selectedType="";
    String selectedFormat="";
    Vector msgRsrcButtons;//contiene los mensajes correspondientes a cada boton predefinido en formato de nodos
    int nodeCode=0;//auxiliar en el mapeo de tipo de nodo para msg resources
    String nodoAux="";//almacenara el nombre del nodo
    boolean trap=false;//flag - evitara uso de multiples botones en formato de citas
    Vector noValid; //caracteres que no son validos como separador
    boolean nuevaCita=true;
    boolean formatFlag=false;
    HashMap nodeFormatsMap=new HashMap();//contendra los formatos especificos para cada nodo - la llave sera el nombre de columna seleccionado
    HashMap nodeWeightMap=new HashMap();//contendra los valores de cada elemento que compone cada nodo, la llave sera la misma que en nodeFormatsMap
    Vector nodeWeight=new Vector(); //Almacenara temporalmente los pesos de los elementos de un nodo, el vector se guardara como valor de nodo en nodeWeightMap
    Vector lastWeight=new Vector();//Almacenara temporalmente los pesos de los elementos, obtenidos de nodeWeightMap    

    public void initVec(){
        noValid=new Vector();
        noValid.add("a"); noValid.add("A"); noValid.add("b");noValid.add("B");
        noValid.add("c"); noValid.add("C"); noValid.add("d");noValid.add("D");
        noValid.add("e"); noValid.add("E"); noValid.add("f");noValid.add("F");
        noValid.add("g"); noValid.add("G"); noValid.add("h");noValid.add("H");
        noValid.add("i"); noValid.add("I"); noValid.add("j");noValid.add("J");
        noValid.add("k"); noValid.add("K"); noValid.add("l");noValid.add("L");
        noValid.add("m"); noValid.add("M"); noValid.add("n");noValid.add("N");
        noValid.add("o"); noValid.add("O"); noValid.add("p");noValid.add("P");
        noValid.add("q"); noValid.add("Q"); noValid.add("r");noValid.add("R");
        noValid.add("s"); noValid.add("S"); noValid.add("t");noValid.add("T");
        noValid.add("u"); noValid.add("U"); noValid.add("v");noValid.add("V");
        noValid.add("w"); noValid.add("W"); noValid.add("x");noValid.add("X");
        noValid.add("y"); noValid.add("Y"); noValid.add("z");noValid.add("Z");
        noValid.add("0"); noValid.add("1"); noValid.add("2");noValid.add("3");
        noValid.add("4"); noValid.add("5"); noValid.add("6");noValid.add("7");
        noValid.add("8"); noValid.add("9");
    }

    AppController control;
    /** Creates new form Interfaz */
    public Interfaz(AppController control) {
        initComponents();
        this.tabs.setEnabledAt(1, false);
        this.tabs.setEnabledAt(2, false);
        this.tabs.setEnabledAt(3, false);
        this.control = control;
        labelErrorCita.setVisible(false);
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ReglasWindow = new javax.swing.JFrame();
        jLabel14 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        comboFormato = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaCitas = new javax.swing.JTable();
        labelInstructionsCitation = new javax.swing.JLabel();
        labelErrorCita = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        labelNodeFormatExample = new javax.swing.JLabel();
        nodeFormatExampleTxt = new javax.swing.JTextField();
        labelSelectOneNode = new javax.swing.JLabel();
        botonNuevaCita = new javax.swing.JButton();
        KBWindow = new javax.swing.JFrame();
        jScrollPane5 = new javax.swing.JScrollPane();
        listaDeEntidades = new javax.swing.JList();
        BotonAgregar = new javax.swing.JButton();
        BotonEliminar = new javax.swing.JButton();
        BotonSalirKB = new javax.swing.JButton();
        FormatoCitaWindow = new javax.swing.JFrame();
        labelSelectNodeElements = new javax.swing.JLabel();
        panelOpciones1 = new javax.swing.JPanel();
        addAuthor = new javax.swing.JButton();
        addDate = new javax.swing.JButton();
        addTitle = new javax.swing.JButton();
        addVolume = new javax.swing.JButton();
        addPage = new javax.swing.JButton();
        addPlace = new javax.swing.JButton();
        addPublisher = new javax.swing.JButton();
        closeControls = new javax.swing.JButton();
        panelOpciones2 = new javax.swing.JPanel();
        labelSelectKind = new javax.swing.JLabel();
        comboTipoMedio = new javax.swing.JComboBox();
        labelSelectType = new javax.swing.JLabel();
        comboTiposCitas = new javax.swing.JComboBox();
        botonNuevoTipoCita = new javax.swing.JButton();
        nuevoTipoCitaTxt = new javax.swing.JTextField();
        SeparadorWindow = new javax.swing.JFrame();
        labelSeparatorSelection = new javax.swing.JLabel();
        separadorTxt = new javax.swing.JTextField();
        separadorOK = new javax.swing.JButton();
        labelErrorSep = new javax.swing.JLabel();
        ReglasPorNodoWindow = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        botonAddUpper = new javax.swing.JButton();
        botonAddLower = new javax.swing.JButton();
        botonAddSeparator = new javax.swing.JButton();
        botonAddNumber = new javax.swing.JButton();
        labelControlsHint = new javax.swing.JLabel();
        botonPredef9 = new javax.swing.JButton();
        botonPredef8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaNodos = new javax.swing.JTable();
        labelComponentsExample = new javax.swing.JLabel();
        nodeExampleTxt = new javax.swing.JTextField();
        PesosParaNodoWindow = new javax.swing.JFrame();
        labelSeleccioneImportancia = new javax.swing.JLabel();
        labelSumaMsg = new javax.swing.JLabel();
        labelSumaAdvert = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        labelPesoTotal = new javax.swing.JLabel();
        labelPesoDeElemento = new javax.swing.JLabel();
        pesoTotalTxt = new javax.swing.JTextField();
        pesoElemNodoTxt = new javax.swing.JTextField();
        botonOKPesosParaNodo = new javax.swing.JButton();
        labelModifiquePeso = new javax.swing.JLabel();
        labelSelectDefaultWeights = new javax.swing.JLabel();
        botonPesosDefecto = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaElementos = new javax.swing.JTable();
        labelElegido = new javax.swing.JLabel();
        selectedElementLabel = new javax.swing.JLabel();
        AgregarWindow = new javax.swing.JFrame();
        etiqueta = new javax.swing.JLabel();
        TextFieldAgregar = new javax.swing.JTextField();
        BotonGuardar = new javax.swing.JButton();
        ConfigWindow = new javax.swing.JFrame();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        TextFieldHost = new javax.swing.JTextField();
        TextFieldPort = new javax.swing.JTextField();
        TextFieldUser = new javax.swing.JTextField();
        PasswordFieldPass = new javax.swing.JPasswordField();
        GuardarConfig = new javax.swing.JButton();
        BotonSalirConfig = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        panelMetadata = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfTitulo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfAutor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfCreador = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfFechaDeCreacion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfFechaDeModificacion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfNumeroDePaginas = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfPalabrasClave = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfProductor = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfTema = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        panelRawData = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaRawData = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        panelReferenciasRAW = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textPaneReferencias = new javax.swing.JTextPane();
        typeOfCitationCombo = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        clearButtonReferencias = new javax.swing.JButton();
        panelFoundReferences = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        titleFoundReferencesTextField = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        authorFoundReferencesTextArea = new javax.swing.JTextArea();
        publisherFoundReferencesTextField = new javax.swing.JTextField();
        dateFoundReferencesTextField = new javax.swing.JTextField();
        pagesFoundReferencesTextField = new javax.swing.JTextField();
        volumeFoundReferencesteTextField = new javax.swing.JTextField();
        authorFoundReferencesOK = new javax.swing.JButton();
        authorFoundReferencesWRONG = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        titleFoundReferencesOK = new javax.swing.JButton();
        titleFoundReferencesWrong = new javax.swing.JButton();
        publisherFoundReferencesOk = new javax.swing.JButton();
        publisherFoundReferencesWrong = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        dateFoundReferencesOk = new javax.swing.JButton();
        dateFoundReferencesWrong = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        pagesFoundReferencesOk = new javax.swing.JButton();
        pagesFoundReferencesWrong = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        volumeFoundReferencesOk = new javax.swing.JButton();
        volumeFoundReferencesWrong = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        originalReferenceTextArea = new javax.swing.JTextArea();
        previewsButtonFoundReferences = new javax.swing.JButton();
        nextButtonFoundReferences = new javax.swing.JButton();
        counterLabelFoundReferences = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        locationFoundReferencesTextField = new javax.swing.JTextField();
        locationFoundReferencesOk = new javax.swing.JButton();
        locationFoundReferencesWrong = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        extraFoundReferencesTextArea = new javax.swing.JTextArea();
        menuPrincipal = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        newCitation = new javax.swing.JMenuItem();
        MenuOpenPDF = new javax.swing.JMenuItem();
        MenuSalir = new javax.swing.JMenuItem();
        MenuEdit = new javax.swing.JMenu();
        menuReglas = new javax.swing.JMenu();
        menuKBReferencias = new javax.swing.JMenuItem();
        menuKBAutores = new javax.swing.JMenuItem();
        menuKB = new javax.swing.JMenu();
        menuItemKBEditoriales = new javax.swing.JMenuItem();
        menuItemKBAutores = new javax.swing.JMenuItem();
        menuItemKBTitulos = new javax.swing.JMenuItem();
        menuItemKBLugares = new javax.swing.JMenuItem();
        MenuItemPreferencias = new javax.swing.JMenuItem();

        ReglasWindow.setTitle("Reglas");

        jLabel14.setText("Tipo:");

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Libro", "Revista", "Periodico", "Pagina de internet" }));
        comboTipo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                comboTipoMousePressed(evt);
            }
        });

        jLabel15.setText("Nombre:");

        comboFormato.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Harvard", "Vancuver", "Chicago", "ISO" }));
        comboFormato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFormatoActionPerformed(evt);
            }
        });

        tablaCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaCitas.setDragEnabled(true);
        tablaCitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablaCitasMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tablaCitas);

        labelInstructionsCitation.setText("Posicione los componentes arrastrandolos y con click derecho en una imagen, guarde los cambios: ");

        labelErrorCita.setForeground(java.awt.Color.red);
        labelErrorCita.setText("Se debe cumplir la regla: \"nodo separador nodo separador... nodo\"");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Formato", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        labelNodeFormatExample.setText("Ejemplo del componente seleccionado:");

        nodeFormatExampleTxt.setEditable(false);
        nodeFormatExampleTxt.setToolTipText("Doble click para editar peso");
        nodeFormatExampleTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                nodeFormatExampleTxtMouseReleased(evt);
            }
        });

        labelSelectOneNode.setText("Seleccione un componente para mostrar el formato que presenta");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(nodeFormatExampleTxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, labelNodeFormatExample, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(labelSelectOneNode, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                        .add(93, 93, 93)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(labelSelectOneNode)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelNodeFormatExample)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nodeFormatExampleTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botonNuevaCita.setText("Nuevo");
        botonNuevaCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevaCitaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout ReglasWindowLayout = new org.jdesktop.layout.GroupLayout(ReglasWindow.getContentPane());
        ReglasWindow.getContentPane().setLayout(ReglasWindowLayout);
        ReglasWindowLayout.setHorizontalGroup(
            ReglasWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ReglasWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(ReglasWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ReglasWindowLayout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(ReglasWindowLayout.createSequentialGroup()
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(comboTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel15)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(comboFormato, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(32, 32, 32)
                        .add(botonNuevaCita, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                        .add(212, 212, 212))))
            .add(ReglasWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, ReglasWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(labelInstructionsCitation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                .addContainerGap())
            .add(ReglasWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(labelErrorCita, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .add(328, 328, 328))
        );
        ReglasWindowLayout.setVerticalGroup(
            ReglasWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ReglasWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(ReglasWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(comboTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15)
                    .add(comboFormato, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(botonNuevaCita))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 38, Short.MAX_VALUE)
                .add(labelInstructionsCitation)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelErrorCita)
                .add(19, 19, 19)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        listaDeEntidades.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(listaDeEntidades);

        BotonAgregar.setText("Agregar");
        BotonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAgregarActionPerformed(evt);
            }
        });

        BotonEliminar.setText("Eliminar");
        BotonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEliminarActionPerformed(evt);
            }
        });

        BotonSalirKB.setText("Salir");
        BotonSalirKB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalirKBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout KBWindowLayout = new org.jdesktop.layout.GroupLayout(KBWindow.getContentPane());
        KBWindow.getContentPane().setLayout(KBWindowLayout);
        KBWindowLayout.setHorizontalGroup(
            KBWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(KBWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 213, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(KBWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(BotonSalirKB, 0, 0, Short.MAX_VALUE)
                    .add(BotonAgregar)
                    .add(BotonEliminar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        KBWindowLayout.setVerticalGroup(
            KBWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(KBWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(KBWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(KBWindowLayout.createSequentialGroup()
                        .add(BotonAgregar)
                        .add(18, 18, 18)
                        .add(BotonEliminar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(BotonSalirKB))
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 335, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        FormatoCitaWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        FormatoCitaWindow.setTitle("Controles Cita");
        FormatoCitaWindow.setResizable(false);

        labelSelectNodeElements.setText("Seleccione los elementos a incluir en su formato personalizado de cita:");

        panelOpciones1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agregar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        addAuthor.setText("Autor");
        addAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAuthorActionPerformed(evt);
            }
        });

        addDate.setText("Fecha");
        addDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateActionPerformed(evt);
            }
        });

        addTitle.setText("Titulo");
        addTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTitleActionPerformed(evt);
            }
        });

        addVolume.setText("Volumen");
        addVolume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVolumeActionPerformed(evt);
            }
        });

        addPage.setText("Paginas");
        addPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPageActionPerformed(evt);
            }
        });

        addPlace.setText("Lugar");
        addPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceActionPerformed(evt);
            }
        });

        addPublisher.setText("Editorial");
        addPublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPublisherActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout panelOpciones1Layout = new org.jdesktop.layout.GroupLayout(panelOpciones1);
        panelOpciones1.setLayout(panelOpciones1Layout);
        panelOpciones1Layout.setHorizontalGroup(
            panelOpciones1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelOpciones1Layout.createSequentialGroup()
                .addContainerGap()
                .add(panelOpciones1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, addTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, addDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, addAuthor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 129, Short.MAX_VALUE)
                .add(panelOpciones1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(addPlace, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(addPage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(panelOpciones1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addVolume, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(81, 81, 81)
                .add(addPublisher, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelOpciones1Layout.setVerticalGroup(
            panelOpciones1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelOpciones1Layout.createSequentialGroup()
                .add(panelOpciones1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelOpciones1Layout.createSequentialGroup()
                        .add(panelOpciones1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(addAuthor)
                            .add(addPublisher))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(addDate)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(addTitle))
                    .add(panelOpciones1Layout.createSequentialGroup()
                        .add(addVolume)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(addPage)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(addPlace)))
                .addContainerGap())
        );

        closeControls.setText("Cerrar Esta Venatana...");
        closeControls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeControlsActionPerformed(evt);
            }
        });

        panelOpciones2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Caracteristicas:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        labelSelectKind.setText("Para:");

        comboTipoMedio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Revista", "Libro" }));

        labelSelectType.setText("De tipo:");

        botonNuevoTipoCita.setText("Nuevo Tipo");
        botonNuevoTipoCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoTipoCitaActionPerformed(evt);
            }
        });

        nuevoTipoCitaTxt.setEnabled(false);

        org.jdesktop.layout.GroupLayout panelOpciones2Layout = new org.jdesktop.layout.GroupLayout(panelOpciones2);
        panelOpciones2.setLayout(panelOpciones2Layout);
        panelOpciones2Layout.setHorizontalGroup(
            panelOpciones2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelOpciones2Layout.createSequentialGroup()
                .addContainerGap()
                .add(panelOpciones2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelOpciones2Layout.createSequentialGroup()
                        .add(labelSelectType)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(comboTiposCitas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 143, Short.MAX_VALUE)
                        .add(labelSelectKind)
                        .add(34, 34, 34)
                        .add(comboTipoMedio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(panelOpciones2Layout.createSequentialGroup()
                        .add(botonNuevoTipoCita)
                        .add(18, 18, 18)
                        .add(nuevoTipoCitaTxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelOpciones2Layout.setVerticalGroup(
            panelOpciones2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelOpciones2Layout.createSequentialGroup()
                .addContainerGap()
                .add(panelOpciones2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comboTipoMedio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelSelectKind)
                    .add(labelSelectType)
                    .add(comboTiposCitas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(panelOpciones2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(botonNuevoTipoCita)
                    .add(nuevoTipoCitaTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout FormatoCitaWindowLayout = new org.jdesktop.layout.GroupLayout(FormatoCitaWindow.getContentPane());
        FormatoCitaWindow.getContentPane().setLayout(FormatoCitaWindowLayout);
        FormatoCitaWindowLayout.setHorizontalGroup(
            FormatoCitaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FormatoCitaWindowLayout.createSequentialGroup()
                .add(FormatoCitaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(FormatoCitaWindowLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(labelSelectNodeElements))
                    .add(FormatoCitaWindowLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(panelOpciones1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(FormatoCitaWindowLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(panelOpciones2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(FormatoCitaWindowLayout.createSequentialGroup()
                        .add(182, 182, 182)
                        .add(closeControls)))
                .addContainerGap())
        );
        FormatoCitaWindowLayout.setVerticalGroup(
            FormatoCitaWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(FormatoCitaWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(labelSelectNodeElements)
                .add(18, 18, 18)
                .add(panelOpciones1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(panelOpciones2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(closeControls)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        SeparadorWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        SeparadorWindow.setTitle("Separador");

        labelSeparatorSelection.setText("Ingrese el separador que estara detras del elemento:");

        separadorOK.setText("OK!");
        separadorOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                separadorOKActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout SeparadorWindowLayout = new org.jdesktop.layout.GroupLayout(SeparadorWindow.getContentPane());
        SeparadorWindow.getContentPane().setLayout(SeparadorWindowLayout);
        SeparadorWindowLayout.setHorizontalGroup(
            SeparadorWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(SeparadorWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(SeparadorWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labelSeparatorSelection, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                    .add(SeparadorWindowLayout.createSequentialGroup()
                        .add(separadorTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 145, Short.MAX_VALUE)
                        .add(separadorOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(labelErrorSep, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE))
                .addContainerGap())
        );
        SeparadorWindowLayout.setVerticalGroup(
            SeparadorWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(SeparadorWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(labelSeparatorSelection)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(labelErrorSep)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(SeparadorWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(separadorTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(separadorOK))
                .addContainerGap())
        );

        ReglasPorNodoWindow.setTitle("Modificando:");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel26.setText("Controles:");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jLabel26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel26)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botonAddUpper.setText("Mayuscula");
        botonAddUpper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddUpperActionPerformed(evt);
            }
        });

        botonAddLower.setText("Minuscula");
        botonAddLower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddLowerActionPerformed(evt);
            }
        });

        botonAddSeparator.setText("Separador");
        botonAddSeparator.setEnabled(false);
        botonAddSeparator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddSeparatorActionPerformed(evt);
            }
        });

        botonAddNumber.setText("Numero");
        botonAddNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAddNumberActionPerformed(evt);
            }
        });

        labelControlsHint.setText("Las mayusculas, minusculas y numeros representan una o mas");

        botonPredef9.setText("Year");
        botonPredef9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPredef9ActionPerformed(evt);
            }
        });

        botonPredef8.setText("Day");
        botonPredef8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPredef8ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 67, Short.MAX_VALUE)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, botonAddNumber, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, botonAddUpper, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, Short.MAX_VALUE))
                        .add(56, 56, 56)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(botonPredef8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                            .add(botonAddLower, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(58, 58, 58)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(botonPredef9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .add(botonAddSeparator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(labelControlsHint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 496, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(botonAddSeparator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .add(botonAddLower, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .add(botonAddUpper, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(botonPredef9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(botonAddNumber, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                        .add(botonPredef8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelControlsHint)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Vista previa"));

        jButton1.setText("OK!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tablaNodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(tablaNodos);

        labelComponentsExample.setText("Ejemplo:");

        nodeExampleTxt.setEditable(false);
        nodeExampleTxt.setDisabledTextColor(java.awt.Color.black);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 537, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(labelComponentsExample, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
<<<<<<< .mine
                        .add(nodeExampleTxt))
                    .add(jScrollPaneNodoCitaPrev, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 537, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(botonReglasOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 55, Short.MAX_VALUE)
=======
                        .add(nodeExampleTxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                        .add(25, 25, 25)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
>>>>>>> .r288
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelComponentsExample, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nodeExampleTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout ReglasPorNodoWindowLayout = new org.jdesktop.layout.GroupLayout(ReglasPorNodoWindow.getContentPane());
        ReglasPorNodoWindow.getContentPane().setLayout(ReglasPorNodoWindowLayout);
        ReglasPorNodoWindowLayout.setHorizontalGroup(
            ReglasPorNodoWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ReglasPorNodoWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(ReglasPorNodoWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        ReglasPorNodoWindowLayout.setVerticalGroup(
            ReglasPorNodoWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ReglasPorNodoWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        PesosParaNodoWindow.setTitle("Importancia Por Elemento");

        labelSeleccioneImportancia.setText("Seleccione una importancia para cada elemento:");

        labelSumaMsg.setText("La suma del peso de los elementos debe ser 100");

        labelSumaAdvert.setText("Si la suma total no es 100, los pesos no se guardaran.");

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelPesoTotal.setText("Total:");

        labelPesoDeElemento.setText("Peso: ");

        pesoTotalTxt.setEditable(false);

        pesoElemNodoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesoElemNodoTxtActionPerformed(evt);
            }
        });

        botonOKPesosParaNodo.setText("OK");
        botonOKPesosParaNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOKPesosParaNodoActionPerformed(evt);
            }
        });

        labelModifiquePeso.setText("Modifique el peso y pulse \"Enter\"");

        labelSelectDefaultWeights.setText("O seleccione los valores por defecto:");

        botonPesosDefecto.setText("Defecto");
        botonPesosDefecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPesosDefectoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(labelPesoTotal, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(labelPesoDeElemento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(pesoTotalTxt)
                    .add(pesoElemNodoTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6Layout.createSequentialGroup()
                        .add(labelSelectDefaultWeights, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(botonPesosDefecto)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(botonOKPesosParaNodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(labelModifiquePeso, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(pesoElemNodoTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelPesoDeElemento)
                    .add(labelModifiquePeso))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(pesoTotalTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(labelPesoTotal))
                    .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(labelSelectDefaultWeights)
                        .add(botonOKPesosParaNodo)
                        .add(botonPesosDefecto)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Elementos:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        tablaElementos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaElementos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tablaElementosMouseReleased(evt);
            }
        });
        jScrollPane7.setViewportView(tablaElementos);

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                .addContainerGap())
        );

        labelElegido.setText("Elegido: ");

        selectedElementLabel.setText("<Ninguno>");

        org.jdesktop.layout.GroupLayout PesosParaNodoWindowLayout = new org.jdesktop.layout.GroupLayout(PesosParaNodoWindow.getContentPane());
        PesosParaNodoWindow.getContentPane().setLayout(PesosParaNodoWindowLayout);
        PesosParaNodoWindowLayout.setHorizontalGroup(
            PesosParaNodoWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, PesosParaNodoWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(PesosParaNodoWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, labelSeleccioneImportancia, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, labelSumaMsg, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, labelSumaAdvert, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, PesosParaNodoWindowLayout.createSequentialGroup()
                        .add(labelElegido, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectedElementLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PesosParaNodoWindowLayout.setVerticalGroup(
            PesosParaNodoWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PesosParaNodoWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(labelSeleccioneImportancia)
                .add(18, 18, 18)
                .add(labelSumaMsg)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(labelSumaAdvert)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PesosParaNodoWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelElegido)
                    .add(selectedElementLabel))
                .add(18, 18, 18)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        BotonGuardar.setText("Guardar");
        BotonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGuardarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout AgregarWindowLayout = new org.jdesktop.layout.GroupLayout(AgregarWindow.getContentPane());
        AgregarWindow.getContentPane().setLayout(AgregarWindowLayout);
        AgregarWindowLayout.setHorizontalGroup(
            AgregarWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AgregarWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(AgregarWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(AgregarWindowLayout.createSequentialGroup()
                        .add(etiqueta)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 83, Short.MAX_VALUE)
                        .add(TextFieldAgregar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 397, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, AgregarWindowLayout.createSequentialGroup()
                        .add(BotonGuardar)
                        .add(206, 206, 206))))
        );
        AgregarWindowLayout.setVerticalGroup(
            AgregarWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AgregarWindowLayout.createSequentialGroup()
                .add(35, 35, 35)
                .add(AgregarWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(etiqueta)
                    .add(TextFieldAgregar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(BotonGuardar)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        ConfigWindow.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                ConfigWindowComponentShown(evt);
            }
        });

        jLabel38.setText("Host :");

        jLabel39.setText("Port  :");

        jLabel40.setText("User :");

        jLabel41.setText("Pass :");

        GuardarConfig.setText("Guardar");
        GuardarConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarConfigActionPerformed(evt);
            }
        });

        BotonSalirConfig.setText("Salir");
        BotonSalirConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalirConfigActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout ConfigWindowLayout = new org.jdesktop.layout.GroupLayout(ConfigWindow.getContentPane());
        ConfigWindow.getContentPane().setLayout(ConfigWindowLayout);
        ConfigWindowLayout.setHorizontalGroup(
            ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ConfigWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ConfigWindowLayout.createSequentialGroup()
                        .add(jLabel38)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(TextFieldHost, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                    .add(ConfigWindowLayout.createSequentialGroup()
                        .add(ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel39)
                            .add(jLabel40)
                            .add(jLabel41))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ConfigWindowLayout.createSequentialGroup()
                                .add(GuardarConfig)
                                .add(74, 74, 74)
                                .add(BotonSalirConfig, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(PasswordFieldPass, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                            .add(TextFieldUser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                            .add(TextFieldPort, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))))
                .addContainerGap())
        );
        ConfigWindowLayout.setVerticalGroup(
            ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ConfigWindowLayout.createSequentialGroup()
                .addContainerGap()
                .add(ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel38)
                    .add(TextFieldHost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel39)
                    .add(TextFieldPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel40)
                    .add(TextFieldUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel41)
                    .add(PasswordFieldPass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(ConfigWindowLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BotonSalirConfig)
                    .add(GuardarConfig))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Louhi");

        jLabel1.setText("Titulo:");

        jLabel2.setText("Autor:");

        jLabel3.setText("Creador:");

        jLabel4.setText("Fecha de creacion:");

        jLabel5.setText("Fecha de modificacion:");

        jLabel6.setText("Numero de paginas:");

        jLabel7.setText("Palabras clave:");

        jLabel8.setText("Productor:");

        jLabel9.setText("Tema:");

        jLabel10.setText("...zzzZZZzzz...");

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/metadata.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout panelMetadataLayout = new org.jdesktop.layout.GroupLayout(panelMetadata);
        panelMetadata.setLayout(panelMetadataLayout);
        panelMetadataLayout.setHorizontalGroup(
            panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelMetadataLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelMetadataLayout.createSequentialGroup()
                        .add(panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(panelMetadataLayout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfTitulo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE))
                            .add(panelMetadataLayout.createSequentialGroup()
                                .add(jLabel2)
                                .add(14, 14, 14)
                                .add(tfAutor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 174, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfCreador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfNumeroDePaginas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(panelMetadataLayout.createSequentialGroup()
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfFechaDeCreacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel5)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfFechaDeModificacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 187, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(panelMetadataLayout.createSequentialGroup()
                                .add(jLabel7)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfPalabrasClave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 340, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel8)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
<<<<<<< .mine
                                .add(tfProductor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
=======
                                .add(tfProductor, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
>>>>>>> .r288
                            .add(panelMetadataLayout.createSequentialGroup()
                                .add(jLabel9)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(tfTema, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(510, 510, 510)))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, panelMetadataLayout.createSequentialGroup()
                        .add(panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 506, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(143, 143, 143))
                    .add(panelMetadataLayout.createSequentialGroup()
                        .add(jLabel11)
<<<<<<< .mine
                        .addContainerGap(567, Short.MAX_VALUE))))
=======
                        .addContainerGap(548, Short.MAX_VALUE))))
>>>>>>> .r288
        );
        panelMetadataLayout.setVerticalGroup(
            panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelMetadataLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(tfTitulo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfAutor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(tfCreador, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(tfNumeroDePaginas, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfFechaDeCreacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(tfFechaDeModificacion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(tfPalabrasClave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8)
                    .add(tfProductor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelMetadataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tfTema, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9))
<<<<<<< .mine
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 330, Short.MAX_VALUE)
=======
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 360, Short.MAX_VALUE)
>>>>>>> .r288
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel10)
                .add(88, 88, 88)
                .add(jLabel11)
                .add(39, 39, 39))
        );

        tabs.addTab("Metadata", panelMetadata);

        areaRawData.setColumns(20);
        areaRawData.setEditable(false);
        areaRawData.setRows(5);
        areaRawData.setToolTipText("Texto encontrado dentro del PDF");
        jScrollPane1.setViewportView(areaRawData);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/raw-data.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout panelRawDataLayout = new org.jdesktop.layout.GroupLayout(panelRawData);
        panelRawData.setLayout(panelRawDataLayout);
        panelRawDataLayout.setHorizontalGroup(
            panelRawDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelRawDataLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelRawDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
<<<<<<< .mine
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE)
=======
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE)
>>>>>>> .r288
                    .add(jLabel12))
                .addContainerGap())
        );
        panelRawDataLayout.setVerticalGroup(
            panelRawDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelRawDataLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 623, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(30, 30, 30)
                .add(jLabel12)
<<<<<<< .mine
                .addContainerGap(22, Short.MAX_VALUE))
=======
                .addContainerGap(52, Short.MAX_VALUE))
>>>>>>> .r288
        );

        tabs.addTab("Raw Data", panelRawData);

        panelReferenciasRAW.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                panelReferenciasRAWShown(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/referencias.png"))); // NOI18N

        textPaneReferencias.setEditable(false);
        jScrollPane2.setViewportView(textPaneReferencias);

        typeOfCitationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chicago", "Harvard", "AMA", "APA", "MLA" }));

        jLabel16.setText("<html>T&eacute;cnica usada:</html>");

        clearButtonReferencias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/limpiar.png"))); // NOI18N
        clearButtonReferencias.setToolTipText("Este boton permite limpiar el area de trabajo. ");
        clearButtonReferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonReferenciasActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout panelReferenciasRAWLayout = new org.jdesktop.layout.GroupLayout(panelReferenciasRAW);
        panelReferenciasRAW.setLayout(panelReferenciasRAWLayout);
        panelReferenciasRAWLayout.setHorizontalGroup(
            panelReferenciasRAWLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelReferenciasRAWLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelReferenciasRAWLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel13)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, panelReferenciasRAWLayout.createSequentialGroup()
                        .add(panelReferenciasRAWLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, panelReferenciasRAWLayout.createSequentialGroup()
                                .add(jLabel16)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(typeOfCitationCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
<<<<<<< .mine
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 488, Short.MAX_VALUE)
=======
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 469, Short.MAX_VALUE)
>>>>>>> .r288
                                .add(clearButtonReferencias))
<<<<<<< .mine
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE))
=======
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE))
>>>>>>> .r288
                        .addContainerGap())))
        );
        panelReferenciasRAWLayout.setVerticalGroup(
            panelReferenciasRAWLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, panelReferenciasRAWLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelReferenciasRAWLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(typeOfCitationCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(clearButtonReferencias))
                .add(23, 23, 23)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 566, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel13)
                .add(38, 38, 38))
        );

        tabs.addTab("Referencias", panelReferenciasRAW);

        panelFoundReferences.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                citasComponentShown(evt);
            }
        });

        jLabel17.setText("Autores:");

        jLabel18.setText("Editorial:");

        jLabel19.setText("Fecha:");

        jLabel20.setText("<html>P&aacute;ginas:</html>");

        jLabel21.setText("Volumen:");

        jLabel22.setText("Titulo:");

        titleFoundReferencesTextField.setEditable(false);

        authorFoundReferencesTextArea.setColumns(20);
        authorFoundReferencesTextArea.setEditable(false);
        authorFoundReferencesTextArea.setRows(2);
        jScrollPane4.setViewportView(authorFoundReferencesTextArea);

        publisherFoundReferencesTextField.setEditable(false);

        dateFoundReferencesTextField.setEditable(false);

        pagesFoundReferencesTextField.setEditable(false);

        volumeFoundReferencesteTextField.setEditable(false);

        authorFoundReferencesOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhicorrecto30pxl.png"))); // NOI18N
        authorFoundReferencesOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorFoundReferencesOKActionPerformed(evt);
            }
        });

        authorFoundReferencesWRONG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhifalso30pxl.png"))); // NOI18N

        titleFoundReferencesOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhicorrecto30pxl.png"))); // NOI18N
        titleFoundReferencesOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleFoundReferencesOKActionPerformed(evt);
            }
        });

        titleFoundReferencesWrong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhifalso30pxl.png"))); // NOI18N

        publisherFoundReferencesOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhicorrecto30pxl.png"))); // NOI18N
        publisherFoundReferencesOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherFoundReferencesOkActionPerformed(evt);
            }
        });

        publisherFoundReferencesWrong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhifalso30pxl.png"))); // NOI18N

        dateFoundReferencesOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhicorrecto30pxl.png"))); // NOI18N
        dateFoundReferencesOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFoundReferencesOkActionPerformed(evt);
            }
        });

        dateFoundReferencesWrong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhifalso30pxl.png"))); // NOI18N

        pagesFoundReferencesOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhicorrecto30pxl.png"))); // NOI18N
        pagesFoundReferencesOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagesFoundReferencesOkActionPerformed(evt);
            }
        });

        pagesFoundReferencesWrong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhifalso30pxl.png"))); // NOI18N

        volumeFoundReferencesOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhicorrecto30pxl.png"))); // NOI18N
        volumeFoundReferencesOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeFoundReferencesOkActionPerformed(evt);
            }
        });

        volumeFoundReferencesWrong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhifalso30pxl.png"))); // NOI18N

        jLabel23.setText("Referencia original:");

        originalReferenceTextArea.setColumns(20);
        originalReferenceTextArea.setLineWrap(true);
        originalReferenceTextArea.setRows(5);
        originalReferenceTextArea.setToolTipText("Esta es la cita original a partir de la cual se intento hacer el proceso de reconocimiento. Puedes copiar y pegar desde aqui si lo prefieres");
        jScrollPane8.setViewportView(originalReferenceTextArea);

        previewsButtonFoundReferences.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/retrocerder.png"))); // NOI18N
        previewsButtonFoundReferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewsButtonFoundReferencesActionPerformed(evt);
            }
        });

        nextButtonFoundReferences.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/avanzar.png"))); // NOI18N
        nextButtonFoundReferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonfoundReferences(evt);
            }
        });

        counterLabelFoundReferences.setText("1/1");

        jLabel14.setText("Lugar:");

        locationFoundReferencesTextField.setEditable(false);

        locationFoundReferencesOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhicorrecto30pxl.png"))); // NOI18N
        locationFoundReferencesOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationFoundReferencesOkActionPerformed(evt);
            }
        });

        locationFoundReferencesWrong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/louhifalso30pxl.png"))); // NOI18N

        jLabel15.setText("Extra:");

        extraFoundReferencesTextArea.setColumns(20);
        extraFoundReferencesTextArea.setRows(2);
        jScrollPane3.setViewportView(extraFoundReferencesTextArea);

        org.jdesktop.layout.GroupLayout panelFoundReferencesLayout = new org.jdesktop.layout.GroupLayout(panelFoundReferences);
        panelFoundReferences.setLayout(panelFoundReferencesLayout);
        panelFoundReferencesLayout.setHorizontalGroup(
            panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelFoundReferencesLayout.createSequentialGroup()
                .addContainerGap()
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelFoundReferencesLayout.createSequentialGroup()
                        .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(panelFoundReferencesLayout.createSequentialGroup()
                                .add(2, 2, 2)
                                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(panelFoundReferencesLayout.createSequentialGroup()
                                        .add(jLabel22)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(titleFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 555, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(titleFoundReferencesOK)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(titleFoundReferencesWrong))
                                    .add(panelFoundReferencesLayout.createSequentialGroup()
                                        .add(jLabel18)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(publisherFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 538, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(publisherFoundReferencesOk)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(publisherFoundReferencesWrong))
                                    .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
                                        .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(previewsButtonFoundReferences)
                                            .add(panelFoundReferencesLayout.createSequentialGroup()
                                                .add(395, 395, 395)
                                                .add(counterLabelFoundReferences)
                                                .add(315, 315, 315)
                                                .add(nextButtonFoundReferences))))
                                    .add(panelFoundReferencesLayout.createSequentialGroup()
                                        .add(2, 2, 2)
                                        .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(panelFoundReferencesLayout.createSequentialGroup()
                                                .add(jLabel19)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(dateFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                                .add(dateFoundReferencesOk)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(dateFoundReferencesWrong))
                                            .add(panelFoundReferencesLayout.createSequentialGroup()
                                                .add(jLabel20)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(pagesFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                                .add(pagesFoundReferencesOk)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(pagesFoundReferencesWrong)
                                                .add(18, 18, 18)
                                                .add(jLabel21)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(volumeFoundReferencesteTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 189, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(volumeFoundReferencesOk)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(volumeFoundReferencesWrong))
                                            .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator7)
                                                .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator5)
                                                .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator3)
                                                .add(org.jdesktop.layout.GroupLayout.LEADING, panelFoundReferencesLayout.createSequentialGroup()
                                                    .add(jLabel14)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(locationFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(locationFoundReferencesOk)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(locationFoundReferencesWrong))
                                                .add(org.jdesktop.layout.GroupLayout.LEADING, panelFoundReferencesLayout.createSequentialGroup()
                                                    .add(jLabel15)
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 657, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                                    .add(panelFoundReferencesLayout.createSequentialGroup()
                                        .add(jSeparator4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 798, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(panelFoundReferencesLayout.createSequentialGroup()
                                .add(jSeparator6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 798, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(panelFoundReferencesLayout.createSequentialGroup()
                                .add(jLabel23)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 493, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(28, 28, 28))
                    .add(panelFoundReferencesLayout.createSequentialGroup()
                        .add(jLabel17)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
<<<<<<< .mine
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
=======
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                        .add(18, 18, 18)
>>>>>>> .r288
                        .add(authorFoundReferencesOK)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(authorFoundReferencesWRONG)
<<<<<<< .mine
                        .add(55, 55, 55))))
=======
                        .add(72, 72, 72))
                    .add(panelFoundReferencesLayout.createSequentialGroup()
                        .add(jLabel18)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(publisherFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 538, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(publisherFoundReferencesOk)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(publisherFoundReferencesWrong)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 87, Short.MAX_VALUE))
                    .add(panelFoundReferencesLayout.createSequentialGroup()
                        .add(jLabel19)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dateFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(dateFoundReferencesOk)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dateFoundReferencesWrong))
                    .add(panelFoundReferencesLayout.createSequentialGroup()
                        .add(jLabel20)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pagesFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(pagesFoundReferencesOk)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pagesFoundReferencesWrong))
                    .add(panelFoundReferencesLayout.createSequentialGroup()
                        .add(jLabel21)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(volumeFoundReferencesteTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(volumeFoundReferencesOk)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(volumeFoundReferencesWrong)
                        .add(441, 441, 441))
                    .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator5)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator3)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 805, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(panelFoundReferencesLayout.createSequentialGroup()
                            .add(counterLabelFoundReferences)
                            .add(315, 315, 315)
                            .add(nextButtonFoundReferences))))
                .addContainerGap())
            .add(panelFoundReferencesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jSeparator4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 798, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
            .add(panelFoundReferencesLayout.createSequentialGroup()
                .add(31, 31, 31)
                .add(jLabel23)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 493, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(196, Short.MAX_VALUE))
            .add(panelFoundReferencesLayout.createSequentialGroup()
                .addContainerGap()
                .add(jSeparator6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 798, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
>>>>>>> .r288
        );
        panelFoundReferencesLayout.setVerticalGroup(
            panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
<<<<<<< .mine
            .add(panelFoundReferencesLayout.createSequentialGroup()
                .addContainerGap()
=======
            .add(org.jdesktop.layout.GroupLayout.TRAILING, panelFoundReferencesLayout.createSequentialGroup()
                .addContainerGap(80, Short.MAX_VALUE)
>>>>>>> .r288
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panelFoundReferencesLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jLabel23))
                    .add(jScrollPane8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel17)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(authorFoundReferencesOK)
                        .add(authorFoundReferencesWRONG)))
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel22)
                    .add(titleFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(titleFoundReferencesOK)
                    .add(titleFoundReferencesWrong))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(publisherFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(publisherFoundReferencesOk)
                    .add(publisherFoundReferencesWrong))
                .add(18, 18, 18)
                .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(dateFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dateFoundReferencesOk)
                    .add(dateFoundReferencesWrong))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel20)
                    .add(pagesFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pagesFoundReferencesOk)
                    .add(pagesFoundReferencesWrong)
                    .add(jLabel21)
                    .add(volumeFoundReferencesteTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(volumeFoundReferencesOk)
                    .add(volumeFoundReferencesWrong))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(locationFoundReferencesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(locationFoundReferencesOk)
                    .add(locationFoundReferencesWrong))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel15)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 95, Short.MAX_VALUE)
                .add(panelFoundReferencesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(previewsButtonFoundReferences)
                    .add(nextButtonFoundReferences)
                    .add(counterLabelFoundReferences))
                .add(13, 13, 13))
        );

        tabs.addTab("Referencias Encontradas", panelFoundReferences);

        MenuFile.setText("Louhi");

        newCitation.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        newCitation.setText("Nueva Cita");
        newCitation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCitationActionPerformed(evt);
            }
        });
        MenuFile.add(newCitation);

        MenuOpenPDF.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        MenuOpenPDF.setText("Abrir PDF");
        MenuOpenPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuOpenPDFActionPerformed(evt);
            }
        });
        MenuFile.add(MenuOpenPDF);

        MenuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        MenuSalir.setText("Salir");
        MenuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSalirActionPerformed(evt);
            }
        });
        MenuFile.add(MenuSalir);

        menuPrincipal.add(MenuFile);

        MenuEdit.setText("Edit");

        menuReglas.setText("Reglas");

        menuKBReferencias.setText("Referencias");
        menuKBReferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuKBReferenciasActionPerformed(evt);
            }
        });
        menuReglas.add(menuKBReferencias);

        menuKBAutores.setText("Autores");
        menuReglas.add(menuKBAutores);

        MenuEdit.add(menuReglas);

        menuKB.setText("Base de conocimientos");

        menuItemKBEditoriales.setText("Editoriales");
        menuItemKBEditoriales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemKBEditorialesActionPerformed(evt);
            }
        });
        menuKB.add(menuItemKBEditoriales);

        menuItemKBAutores.setText("Autores");
        menuItemKBAutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemKBAutoresActionPerformed(evt);
            }
        });
        menuKB.add(menuItemKBAutores);

        menuItemKBTitulos.setText("Titulos");
        menuItemKBTitulos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemKBTitulosActionPerformed(evt);
            }
        });
        menuKB.add(menuItemKBTitulos);

        menuItemKBLugares.setText("Lugares");
        menuItemKBLugares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemKBLugaresActionPerformed(evt);
            }
        });
        menuKB.add(menuItemKBLugares);

        MenuEdit.add(menuKB);

        MenuItemPreferencias.setText("Preferencias");
        MenuItemPreferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemPreferenciasActionPerformed(evt);
            }
        });
        MenuEdit.add(MenuItemPreferencias);

        menuPrincipal.add(MenuEdit);

        setJMenuBar(menuPrincipal);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tabs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 810, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuOpenPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuOpenPDFActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            //This is where a real application would open the file.
            System.out.println("Opening: " + file.getName() + ".");
            try {
               EntidadPDF elPDF = control.convertirPDFAModelo(file);

               SimpleDateFormat formatter = new SimpleDateFormat();

              
               this.tfTitulo.setText(elPDF.getTitulo());
               this.tfAutor.setText(elPDF.getAutor());
               this.tfCreador.setText(elPDF.getCreador());
               this.tfFechaDeCreacion.setText(formatter.format(elPDF.getFechaDeCreacion().getTime()));
               this.tfFechaDeModificacion.setText(formatter.format(elPDF.getFechaDeModificacion().getTime()));
               this.tfNumeroDePaginas.setText(elPDF.getNumeroDePaginas()+"");
               this.tfPalabrasClave.setText(elPDF.getPalabrasClave());
               this.tfProductor.setText(elPDF.getProductor());
               this.tfTema.setText(elPDF.getTema());
               
               this.areaRawData.setText(elPDF.getContenido());

               this.areaRawData.setCaretPosition(0);
               this.tabs.setEnabledAt(1, true);
               this.tabs.setEnabledAt(2, true);

            } catch (NoSePudoException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            } catch (CryptographyException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidPasswordException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            System.out.println("Open command cancelled by user.");
        }

    }//GEN-LAST:event_MenuOpenPDFActionPerformed

    private void MenuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_MenuSalirActionPerformed

    private void panelReferenciasRAWShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelReferenciasRAWShown
        //TODO hacer logica para que solo lo haga la primera vez
        this.listaDeCitas = new LinkedList<String>();
        String content = this.areaRawData.getText();
        String reference="";
        try{
            reference = control.findReferences(content);
        }catch(DataBaseNotFoundException e){
            e.printStackTrace();
        }

        this.textPaneReferencias.setText(reference);
        this.textPaneReferencias.setCaretPosition(0);
        this.tabs.setEnabledAt(3, true);
}//GEN-LAST:event_panelReferenciasRAWShown

    private void menuKBReferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuKBReferenciasActionPerformed
        this.ReglasWindow.pack();
        this.ReglasWindow.setVisible(true);
        citNodes=new Vector();
        nodeFormat=new Vector();
        buildCitTable();
        citExample="";
        tablaCitas.setToolTipText(citExample);
        nodeFormatExampleTxt.setText("");
        nodeFormatsMap.clear();
    }//GEN-LAST:event_menuKBReferenciasActionPerformed

    private void menuItemKBEditorialesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemKBEditorialesActionPerformed
        // TODO agregar el solo cargar cosas de editoriales en la ventana
        try{
            LinkedList lista = control.retrieveAllPublishers();
            this.listaDeEntidades.setListData(lista.toArray());
            this.KBWindow.setTitle("Editoriales");
            this.KBWindow.pack();
            this.KBWindow.setVisible(true);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "La configuración del servidor no es correcta,\nrevise las preferencias en el menu 'edit'.");
        }
    }//GEN-LAST:event_menuItemKBEditorialesActionPerformed

    private void menuItemKBAutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemKBAutoresActionPerformed
        try{
            LinkedList lista = control.retrieveAllAuthors();
            this.listaDeEntidades.setListData(lista.toArray());
            this.KBWindow.setTitle("Autores");
            this.KBWindow.pack();
            this.KBWindow.setVisible(true);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "La configuración del servidor no es correcta,\nrevise las preferencias en el menu 'edit'.");
        }
    }//GEN-LAST:event_menuItemKBAutoresActionPerformed

    
    private void addTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTitleActionPerformed
        // TODO add your handling code here:
        if (trap==false){
            trap=true;
            nodoAux="Titulo";

            SeparadorWindow.setVisible(true);
            addTitle.setEnabled(false);
            botonNuevoTipoCita.setEnabled(false);
            closeControls.setEnabled(false);
        }
}//GEN-LAST:event_addTitleActionPerformed

    private void closeControlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeControlsActionPerformed
        // TODO add your handling code here:
        tablaCitas.setToolTipText(citExample);
        selectedType=(String)comboTipoMedio.getSelectedItem();
        selectedFormat=(String)comboTiposCitas.getSelectedItem();
        FormatoCitaWindow.setVisible(false);
        buildCitTable();
}//GEN-LAST:event_closeControlsActionPerformed

    /**
     * Builds the Citation table, including the respective icons for each column
     */

    public void buildCitTable(){
        citExample="";
        for(int i=0; i<citNodes.size();i++){
            citExample+= (String) citNodes.elementAt(i);
        }
        
        tablaCitas.setToolTipText(citExample);

        String[][] datos=new String[1][4];
        String[] cabecera=new String[citNodes.size()];

        for (int i=0;i<citNodes.size();i++){
            cabecera[i]=citNodes.elementAt(i).toString().substring(0, (citNodes.elementAt(i).toString().length()-1) );
        }

        DefaultTableModel dtm=new DefaultTableModel(datos,cabecera);
        tablaCitas.setModel(dtm);

        for(int i=0;i<cabecera.length;i++){
            if (cabecera[i].equals("Autor")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"autor1.png"));
                tryAddingNode("Autor");//agrega a hash de pesos el nodo actual
            }
            if (cabecera[i].equals("Fecha")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"fecha21.png"));
                tryAddingNode("Fecha");
            }
            if (cabecera[i].equals("Titulo")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"titulo1.png"));
                tryAddingNode("Titulo");
            }
            if (cabecera[i].equals("Volumen")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"volumen1.png"));
                tryAddingNode("Volumen");
            }
            if (cabecera[i].equals("Paginas")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"paginas1.png"));
                tryAddingNode("Paginas");
            }
            if (cabecera[i].equals("Lugar")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"lugar1.png"));
                tryAddingNode("Lugar");
            }
            if (cabecera[i].equals("Editorial")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"editorial1.png"));
                tryAddingNode("Editorial");
            }
            if (cabecera[i].equals("Mayuscula")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"mayusc.png"));
            }
            if (cabecera[i].equals("Minuscula")){
                tablaCitas.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"minusc.png"));
            }
        }
        tablaCitas.setRowHeight(90);
        //tablaCitas.setToolTipText("Click derecho en alguna imagen para actualizar el ejemplo");

    }




    /**
     * Adds an node element Key to nodeWeight HashMap
     * if element already exists, does nothing
     * else adds the element to the HashMap referenced to a null value
     */
     public void tryAddingNode(String keyNode){
         if (!nodeWeightMap.containsKey(keyNode)){
             nodeWeightMap.put(keyNode, null);
         }
     }

/**
 * Builds the element by node Table
 *
 */
    public void buildNodeTable(){

        //se genera y asigna el nuevo modelo de tabla a la tabla formato de nodos
        String[][] datos=new String[1][4];
        String[] cabecera=new String[nodeFormat.size()];

        for (int i=0;i<nodeFormat.size();i++){
            cabecera[i]=nodeFormat.elementAt(i).toString().substring(0,nodeFormat.elementAt(i).toString().length() );
        }

        
        DefaultTableModel dtm=new DefaultTableModel(datos,cabecera);
        tablaNodos.setModel(dtm);

        //Ingresa las imagenes al modelo de la tabla
        for(int i=0;i<cabecera.length;i++){
            if (cabecera[i].equals("A")){
                tablaNodos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"mayusc.png"));
            }
            if (cabecera[i].equals("a")){
                tablaNodos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"minusc.png"));
            }
            if (cabecera[i].equals("S")){
                tablaNodos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"separador.png"));
            }
            if (cabecera[i].equals("Num")){//Actualize this line to "N" to get the respective image
                tablaNodos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"numeros.png"));
            }
            if (cabecera[i].equals("Day")){//Actualize this line to "D" to get the respective image
                tablaNodos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"dias.png"));
            }
            if (cabecera[i].equals("Year")){//Actualize this line to "Y" to get the respective image
                tablaNodos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"anios.png"));
            }
        }
        //nodeExampleTxt.setText(nodeExample);

        //Muestra el ejemplo en un formato mas claro para el usuario
        nodeExampleTxt.setText( mixMsgResources(nodeExample, messageResources(nodeCode)) );
        tablaNodos.setRowHeight(90);

    }






/**
 * Builds tablaElementos for being used on weight assign
 */
    public void buildElementTable(){

        //se genera y asigna el nuevo modelo de tabla a la tabla formato de nodos
        Vector nodeComponents = splitNodeFormat( (String) (nodeFormatsMap.get( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) )) );
        String[][] datos=new String[1][4];
        String[] cabecera=new String[nodeComponents.size()];

        for (int i=0;i<nodeComponents.size();i++){
            cabecera[i]=nodeComponents.elementAt(i).toString();
        }


        DefaultTableModel dtm=new DefaultTableModel(datos,cabecera);
        tablaElementos.setModel(dtm);

        //Ingresa las imagenes al modelo de la tabla
        for(int i=0;i<cabecera.length;i++){
            if (cabecera[i].equals("Mayuscula")){
                tablaElementos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"mayusc.png"));
            }else
            if (cabecera[i].equals("minuscula")){
                tablaElementos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"minusc.png"));
            }else
            if (cabecera[i].equals("Numero-")){//Actualize this line to "Numero" to get the respective image
                tablaElementos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"numeros.png"));
            }else
            if (cabecera[i].equals("Day-")){//Actualize this line to "Day" to get the respective image
                tablaElementos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"dias.png"));
            }else
            if (cabecera[i].equals("Year-")){//Actualize this line to "Year" to get the respective image
                tablaElementos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"anios.png"));
            }else{
                tablaElementos.getColumnModel().getColumn(i).setCellRenderer(new TableCellRenderer(File.separator+"interfaz"+File.separator+"iconos"+File.separator+"separador.png"));
            }
        }
        //nodeExampleTxt.setText(nodeExample);

        //Muestra el ejemplo en un formato mas claro para el usuario
        //ExampleTxt.setText( mixMsgResources(nodeExample, messageResources(nodeCode)) );
        tablaElementos.setRowHeight(90);

    }








    private void addAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAuthorActionPerformed
        // TODO add your handling code here:
        if (trap==false){
            trap=true;
            nodoAux="Autor";

            SeparadorWindow.setVisible(true);
            addAuthor.setEnabled(false);
            botonNuevoTipoCita.setEnabled(false);
            closeControls.setEnabled(false);
        }
        
    }//GEN-LAST:event_addAuthorActionPerformed

    private void addDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateActionPerformed
        // TODO add your handling code here:
        if (trap==false){
            trap=true;
            nodoAux="Fecha";
            SeparadorWindow.setVisible(true);
            addDate.setEnabled(false);
            botonNuevoTipoCita.setEnabled(false);
            closeControls.setEnabled(false);
        }
    }//GEN-LAST:event_addDateActionPerformed

    private void addVolumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVolumeActionPerformed
        // TODO add your handling code here:
        if (trap==false){
            trap=true;
            nodoAux="Volumen";

            SeparadorWindow.setVisible(true);
            addVolume.setEnabled(false);
            botonNuevoTipoCita.setEnabled(false);
            closeControls.setEnabled(false);
        }
    }//GEN-LAST:event_addVolumeActionPerformed

    private void addPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPageActionPerformed
        // TODO add your handling code here:
        if (trap==false){
            trap=true;
            nodoAux="Paginas";

            SeparadorWindow.setVisible(true);
            addPage.setEnabled(false);
            botonNuevoTipoCita.setEnabled(false);
            closeControls.setEnabled(false);
        }
    }//GEN-LAST:event_addPageActionPerformed

    private void addPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceActionPerformed
        // TODO add your handling code here:
        if (trap==false){
            trap=true;
            nodoAux="Lugar";

            SeparadorWindow.setVisible(true);
            addPlace.setEnabled(false);
            botonNuevoTipoCita.setEnabled(false);
            closeControls.setEnabled(false);
        }
    }//GEN-LAST:event_addPlaceActionPerformed

    private void addPublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPublisherActionPerformed
        // TODO add your handling code here:
        if (trap==false){
            trap=true;
            nodoAux="Editorial";

            SeparadorWindow.setVisible(true);
            addPublisher.setEnabled(false);
            botonNuevoTipoCita.setEnabled(false);
            closeControls.setEnabled(false);
        }
    }//GEN-LAST:event_addPublisherActionPerformed

    private void separadorOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separadorOKActionPerformed
        // TODO add your handling code here:
        initVec();
        String sep=separadorTxt.getText();
        if(sep.length()==1){
            if(!noValid.contains(sep)){
                if (formatFlag){
                    formatFlag=false;
                    nodeExample+=sep;
                    separadorTxt.setText("");
                    nodeExampleTxt.setText(nodeExample);
                    nodeExampleTxt.setText(nodeExample);
                    buildNodeTable();
                    botonAddUpper.setEnabled(true);
                    botonAddLower.setEnabled(true);
                    botonAddNumber.setEnabled(true);
                    SeparadorWindow.setVisible(false);
                    if ( (botonPredef8.getText().equals("Day") ) && !(nodeFormat.contains("D")) ){
                        botonPredef8.setEnabled(true);
                    }
                    if ( (botonPredef9.getText().equals("Year") ) && !(nodeFormat.contains("Y")) ){
                        botonPredef9.setEnabled(true);
                    }

                    if( (botonPredef8.getText().equals("Day")) || (botonPredef9.getText().equals("Year")) ){
                        botonAddNumber.setEnabled(false);
                    }

                }else{
                    nodoAux+=sep;
                    citNodes.add(nodoAux);
                    trap=false;
                    nodoAux="";
                    separadorTxt.setText("");
                    SeparadorWindow.setVisible(false);
                    botonNuevoTipoCita.setEnabled(true);
                    closeControls.setEnabled(true);
                }

            }
            else{
                separadorTxt.setText("");
                labelErrorSep.setText("El separador no puede ser ni letra ni numero");
            }
        }
        else{
            separadorTxt.setText("");
            labelErrorSep.setText("Ingrese por favor un unico caracter de separacion");
        }
        
}//GEN-LAST:event_separadorOKActionPerformed

    private void botonNuevoTipoCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoTipoCitaActionPerformed
        // TODO add your handling code here:
        if(nuevaCita){
            nuevaCita=false;
            nuevoTipoCitaTxt.setEnabled(true);
            botonNuevoTipoCita.setText("OK");
            closeControls.setEnabled(false);
        }
        else{
            if(true){//here goes method to validation and send new citation type to control
                nuevaCita=true;
                nuevoTipoCitaTxt.setEnabled(false);
                botonNuevoTipoCita.setText("Nuevo Tipo");
                closeControls.setEnabled(true);
            }
        }

}//GEN-LAST:event_botonNuevoTipoCitaActionPerformed

    private void comboTipoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboTipoMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTipoMousePressed



/**
 * Mix the Message Resources for an specific node
 * Recieves a Vector that contains the specific messages and the target string 
 * Returns a modified String with the respective modifications acording to the node selected
 *
 * @param target
 * @param msgRsrcs
 * @return
 */
    
    public String mixMsgResources(String target, Vector msgRsrcs){
        //0. May 1. Min 2. Sep 3.Num 4. Dia 5. Anio
        String modified=target;

        if ( (msgRsrcs.size()==0) ||(target.length()<1) )
            return "";

        Pattern patron = Pattern.compile("A ");//Mayuscula
        Matcher encaja = patron.matcher(modified);
        modified=encaja.replaceAll( (String)msgRsrcs.elementAt(0) );

        patron = Pattern.compile("a ");//minuscula
        encaja = patron.matcher(modified);
        modified=encaja.replaceAll( (String)msgRsrcs.elementAt(1) );

        patron = Pattern.compile("N ");//numero
        encaja = patron.matcher(modified);
        modified=encaja.replaceAll( (String)msgRsrcs.elementAt(2) );

        patron = Pattern.compile("D ");//Dia
        encaja = patron.matcher(modified);
        modified=encaja.replaceAll( (String)msgRsrcs.elementAt(3) );

        patron = Pattern.compile("Y ");//anio
        encaja = patron.matcher(modified);
        modified=encaja.replaceAll( (String)msgRsrcs.elementAt(4) );


        return modified;
    }




/**
 * Provides different messages for each different node in the system
 * Recieves a code number of the respective node
 * Returns a Vector comtaining the respective messages to be applied on the interfaces
 * @param dataCode
 * @return
 */

    public Vector messageResources(int dataCode){
        Vector output= new Vector();
        switch (dataCode){
            case 1: //MsgRscrs for Author
                output.add("Nombre");//0. Mayuscula
                output.add("nombre");//1. minuscula
                output.add("");//2. numero - no disponible para autor
                output.add("");//3. Dia - no disponible para autor
                output.add("");//4. Anio - no disponible para autor
                output.add("Nombre, N.");//5. predef1
                output.add("A , A .");//6. cve predef1

                output.add("Nombre, Nombre.");//7. predef2
                output.add("A , A .");//8. cve predef2

                output.add("Nombre.");//9. predef3
                output.add("A .");//10. cve predef3

                output.add("Nombre Nombre.");//11. predef4
                output.add("A  A .");//12. cve predef4

                output.add("Nombre N.");//13. predef5
                output.add("A  A .");//14. cve predef5

                output.add("Nombre,");//15. predef6
                output.add("A ,");//16. cve predef6

                output.add("Nombre Nombre,");//17. predef7
                output.add("A  A ,");//18. cve predef7

                output.add("Nombre Nombre, Nombre.");//19. predef8
                output.add("A  A  A .");//20. cve predef8

                output.add("Nombre, Nombre, Nombre.");//21. predef9
                output.add("A , A , A .");//22. cve predef9
                break;

            case 2: //MsgResources for Date
                output.add("Month");//0. Mayuscula
                output.add("month");//1. minuscula
                output.add("3");//2. numero
                output.add("03");//3. Dia
                output.add("2009");//4. Anio
                
                output.add("Month, Year");//5. predef1
                output.add("A , Y .");//6. cve predef1

                output.add("Day , Month, Year");//7. predef2
                output.add("D , A , Y ");//8. cve predef2

                output.add("Day Month Year");//9. predef3
                output.add("D  A  Y .");//10. cve predef3

                output.add("Day month Year");//11. predef4
                output.add("D  a  Y .");//12. cve predef4

                output.add("Year Month Day");//13. predef5
                output.add("Y  A  D ");//14. cve predef5

                output.add("Year Month");//15. predef6
                output.add("Y  A ");//16. cve predef6

                output.add("Month Year");//17. predef7
                output.add("A  Y ");//18. cve predef7

                output.add("Day");//19. predef8
                output.add("D ");//20. cve predef8

                output.add("Year");//21. predef9
                output.add("Y ");//22. cve predef9
                break;

            case 3: //MsgResources for Title
                output.add("Titulo");//0. Mayuscula
                output.add("titulo");//1. minuscula
                output.add("3");//2. numero - no disponible para titulo
                output.add(" ");//3. Dia - no disponible para titulo
                output.add("");//4. Anio - no disponible para titulo

                output.add("Titulo");//5. predef1
                output.add("A ");//6. cve predef1

                output.add("titulo");//7. predef2
                output.add("a ");//8. cve predef2

                output.add(" ");//9. predef3
                output.add("");//10. cve predef3

                output.add(" ");//11. predef4
                output.add("");//12. cve predef4

                output.add(" ");//13. predef5
                output.add("");//14. cve predef5

                output.add(" ");//15. predef6
                output.add("");//16. cve predef6

                output.add(" ");//17. predef7
                output.add("");//18. cve predef7

                output.add(" ");//19. predef8
                output.add("");//20. cve predef8

                output.add(" ");//21. predef9
                output.add("");//22. cve predef9

                break;

            case 4: //MsgResources for Publisher
                output.add("Editorial");//0. Mayuscula
                output.add("editorial");//1. minuscula
                output.add("3");//2. numero - no disponible para autor
                output.add("");//3. Dia - no disponible para autor
                output.add("");//4. Anio - no disponible para autor

                output.add("Editorial");//5. predef1
                output.add("A ");//6. cve predef1

                output.add("editorial");//7. predef2
                output.add("a ");//8. cve predef2

                output.add(" ");//9. predef3
                output.add("");//10. cve predef3

                output.add(" ");//11. predef4
                output.add("");//12. cve predef4

                output.add(" ");//13. predef5
                output.add("");//14. cve predef5

                output.add(" ");//15. predef6
                output.add("");//16. cve predef6

                output.add(" ");//17. predef7
                output.add("");//18. cve predef7

                output.add(" ");//19. predef8
                output.add("");//20. cve predef8

                output.add(" ");//21. predef9
                output.add("");//22. cve predef9

                break;

            case 5: //MsgResources for Place
                output.add("Lugar");//0. Mayuscula
                output.add("lugar");//1. minuscula
                output.add("3");//2. numero - no disponible para autor
                output.add("");//3. Dia - no disponible para autor
                output.add("");//4. Anio - no disponible para autor

                output.add("Lugar, Lugar");//5. predef1
                output.add("A , A ");//6. cve predef1

                output.add("Lugar");//7. predef2
                output.add("A ");//8. cve predef2

                output.add("Lugar; Lugar");//9. predef3
                output.add("A ;  A ");//10. cve predef3

                output.add(" ");//11. predef4
                output.add("");//12. cve predef4

                output.add(" ");//13. predef5
                output.add("");//14. cve predef5

                output.add(" ");//15. predef6
                output.add("");//16. cve predef6

                output.add(" ");//17. predef7
                output.add("");//18. cve predef7

                output.add(" ");//19. predef8
                output.add("");//20. cve predef8

                output.add(" ");//21. predef9
                output.add("");//22. cve predef9
                break;

            case 6: //MsgResources for Page
                output.add("Pag");//0. Mayuscula
                output.add("pag");//1. minuscula
                output.add("3");//2. numero - no disponible para autor
                output.add("");//3. Dia - no disponible para autor
                output.add("");//4. Anio - no disponible para autor

                output.add("Pag. 3");//5. predef1
                output.add("A . N ");//6. cve predef1

                output.add("PP. 3");//7. predef2
                output.add("A . N ");//8. cve predef2

                output.add("pp. 3");//9. predef3
                output.add("a . N ");//10. cve predef3

                output.add("paginas: 3");//11. predef4
                output.add("a : N ");//12. cve predef4

                output.add("paginas 3");//13. predef5
                output.add("a N ");//14. cve predef5

                output.add(" ");//15. predef6
                output.add("");//16. cve predef6

                output.add(" ");//17. predef7
                output.add("");//18. cve predef7

                output.add(" ");//19. predef8
                output.add("");//20. cve predef8

                output.add(" ");//21. predef9
                output.add("");//22. cve predef9
                break;

            case 7:  //MsgResources for Volume
                output.add("Volumen");//0. Mayuscula
                output.add("Volumen");//1. minuscula
                output.add("3");//2. numero - no disponible para autor
                output.add("");//3. Dia - no disponible para autor
                output.add("");//4. Anio - no disponible para autor

                output.add("Volumen 3");//5. predef1
                output.add("A  N ");//6. cve predef1

                output.add("Vol. 3");//7. predef2
                output.add("A . N ");//8. cve predef2

                output.add("volumen 3");//9. predef3
                output.add("a  N ");//10. cve predef3

                output.add("vol. 3");//11. predef4
                output.add("a . N ");//12. cve predef4

                output.add(" ");//13. predef5
                output.add(" ");//14. cve predef5

                output.add(" ");//15. predef6
                output.add("");//16. cve predef6

                output.add(" ");//17. predef7
                output.add("");//18. cve predef7

                output.add(" ");//19. predef8
                output.add("");//20. cve predef8

                output.add(" ");//21. predef9
                output.add("");//22. cve predef9
                break;
        }

        return output;
    }









    /*
     * para seleccion de nodo a modificar:
     *
     *
     *
        msgRsrcButtons=new Vector();


        //ajustando la vista y habilitando botones necesarios
        botonModificarFormatoNodo.setEnabled(false);
        botonVerCita.setEnabled(false);
        botonModificarFormatoCita.setEnabled(false);
        botonNuevoFormatoCita.setEnabled(false);
        comboFormatoNodo.setEnabled(false);
        nodeFormat=new Vector();
        nodeExampleTxt.setText("");
        nodeExample="";
        buildNodeTable();
        enableAllFormatButtons();

        //detectando el tipo de nodo - Por menus, el valor nodeCode se asignara con el click
        if( ( (String) comboFormatoNodo.getSelectedItem()).startsWith("Autor") ){
            nodeCode=1;
        }
        if( ( (String) comboFormatoNodo.getSelectedItem()).startsWith("Fecha") ){
            nodeCode=2;
        }
        if( ( (String) comboFormatoNodo.getSelectedItem()).startsWith("Titulo") ){
            nodeCode=3;
        }
        if( ( (String) comboFormatoNodo.getSelectedItem()).startsWith("Editorial") ){
            nodeCode=4;
        }
        if( ( (String) comboFormatoNodo.getSelectedItem()).startsWith("Lugar") ){
            nodeCode=5;
        }
        if( ( (String) comboFormatoNodo.getSelectedItem()).startsWith("Pag") ){
            nodeCode=6;
        }
        if( ( (String) comboFormatoNodo.getSelectedItem()).startsWith("Volumen") ){
            nodeCode=7;
        }

        //Obtiene los mensajes propios del nodo seleccionado
        msgRsrcButtons=messageResources(nodeCode);

        //Asigna las etiquetas a su boton correspondiente
        botonPredef1.setText( ((String)msgRsrcButtons.elementAt(5))  );
        botonPredef2.setText( ((String)msgRsrcButtons.elementAt(7))  );
        botonPredef3.setText( ((String)msgRsrcButtons.elementAt(9))  );
        botonPredef4.setText( ((String)msgRsrcButtons.elementAt(11))  );
        botonPredef5.setText( ((String)msgRsrcButtons.elementAt(13))  );
        botonPredef6.setText( ((String)msgRsrcButtons.elementAt(15))  );
        botonPredef7.setText( ((String)msgRsrcButtons.elementAt(17))  );
        botonPredef8.setText( ((String)msgRsrcButtons.elementAt(19))  );
        botonPredef9.setText( ((String)msgRsrcButtons.elementAt(21))  );

        //Validando que los botones no sean vacios
        if (botonPredef1.getText().equals(" ")){
            botonPredef1.setEnabled(false);
        }
        if (botonPredef2.getText().equals(" ")){
            botonPredef2.setEnabled(false);
        }
        if (botonPredef3.getText().equals(" ")){
            botonPredef3.setEnabled(false);
        }
        if (botonPredef4.getText().equals(" ")){
            botonPredef4.setEnabled(false);
        }
        if (botonPredef5.getText().equals(" ")){
            botonPredef5.setEnabled(false);
        }
        if (botonPredef6.getText().equals(" ")){
            botonPredef6.setEnabled(false);
        }
        if (botonPredef7.getText().equals(" ")){
            botonPredef7.setEnabled(false);
        }
        if (botonPredef8.getText().equals(" ")){
            botonPredef8.setEnabled(false);
        }
        if (botonPredef9.getText().equals(" ")){
            botonPredef9.setEnabled(false);
        }

        //Deshabilitar addNumero si el nodo es una fecha
        if( nodeCode==2 ){
            botonAddNumber.setEnabled(false);
        }

        ReglasPorNodoWindow.setVisible(true);
     */






    public void setNodeExampleTxt(){
        nodeFormatsMap.put( (String)(tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ), nodeExample);
        String temp=(String) (nodeFormatsMap.get( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ));
        nodeFormatExampleTxt.setText( mixMsgResources(temp,messageResources(nodeCode)) );
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ReglasPorNodoWindow.setVisible(false);
        setNodeExampleTxt();
        nodeWeightMap.put(tablaCitas.getColumnName(tablaCitas.getSelectedColumn()), null);
        cargarPesos();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void botonAddUpperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddUpperActionPerformed
        // TODO add your handling code here:
        nodeFormat.add("A");
        nodeExample+="A ";
        disableAllFormatButtons();
        buildNodeTable();
        if ( (botonPredef8.getText().equals("Day") ) && !(nodeFormat.contains("D")) ){
            botonPredef8.setEnabled(true);
        }
        if ( (botonPredef9.getText().equals("Year") ) && !(nodeFormat.contains("Y")) ){
            botonPredef9.setEnabled(true);
        }
        botonAddSeparator.setEnabled(true);
}//GEN-LAST:event_botonAddUpperActionPerformed

    private void botonAddLowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddLowerActionPerformed
        // TODO add your handling code here:
        nodeFormat.add("a");
        nodeExample+="a ";
        disableAllFormatButtons();
        buildNodeTable();
        if ( (botonPredef8.getText().equals("Day") ) && !(nodeFormat.contains("D")) ){
            botonPredef8.setEnabled(true);
        }
        if ( (botonPredef9.getText().equals("Year") ) && !(nodeFormat.contains("Y")) ){
            botonPredef9.setEnabled(true);
        }
        botonAddSeparator.setEnabled(true);
    }//GEN-LAST:event_botonAddLowerActionPerformed

    private void botonAddNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddNumberActionPerformed
        // TODO add your handling code here:
        nodeFormat.add("N");
        nodeExample+="N ";
        disableAllFormatButtons();
        buildNodeTable();
        if ( (botonPredef8.getText().equals("Day") ) && !(nodeFormat.contains("D")) ){
            botonPredef8.setEnabled(true);
        }
        if ( (botonPredef9.getText().equals("Year") ) && !(nodeFormat.contains("Y")) ){
            botonPredef9.setEnabled(true);
        }
        botonAddSeparator.setEnabled(true);
    }//GEN-LAST:event_botonAddNumberActionPerformed

    private void botonAddSeparatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAddSeparatorActionPerformed
        // TODO add your handling code here:
        nodeFormat.add("S");
        formatFlag=true;
        SeparadorWindow.setVisible(true);
    }//GEN-LAST:event_botonAddSeparatorActionPerformed

    private void botonPredef8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPredef8ActionPerformed
        // TODO add your handling code here:

        if ( (botonPredef8.getText().equals("Day") ) && !(nodeFormat.contains("D")) ){
            botonPredef8.setEnabled(false);
            nodeFormat.add("D");
            nodeExample+="D ";
            buildNodeTable();
            
            return;
        }

        ReglasPorNodoWindow.setVisible(false);

        nodeExample= ( (String) msgRsrcButtons.elementAt(20) );
        setNodeExampleTxt();

    }//GEN-LAST:event_botonPredef8ActionPerformed

    private void botonPredef9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPredef9ActionPerformed
        // TODO add your handling code here:
        if ( (botonPredef9.getText().equals("Year") ) && !(nodeFormat.contains("Y")) ){
            botonPredef9.setEnabled(false);
            nodeFormat.add("Y");
            nodeExample+="Y ";
            buildNodeTable();
            return;
        }
        
        ReglasPorNodoWindow.setVisible(false);

        nodeExample= ( (String) msgRsrcButtons.elementAt(22) );
        setNodeExampleTxt();

    }//GEN-LAST:event_botonPredef9ActionPerformed

    public Vector splitNodeFormat(String formatMap){
        //formatMap="A ,A . a , N - D ; Y ";
        Vector result=new Vector();
        if (formatMap==null)
            return result;

        while((formatMap.length()>0)){
            if (formatMap.length()>1){

                if (formatMap.startsWith("A ")){//Mayuscula
                    result.add("Mayuscula");
                    formatMap=formatMap.substring(2);
                }else
                    if (formatMap.startsWith("a ")){//Minuscula
                        result.add("minuscula");
                        formatMap=formatMap.substring(2);
                    }else
                        if (formatMap.startsWith("N ")){//Numero
                            result.add("Numero");
                            formatMap=formatMap.substring(2);
                        }else
                            if (formatMap.startsWith("D ")){//Dia
                                result.add("Day");
                                formatMap=formatMap.substring(2);
                            }else
                                if (formatMap.startsWith("Y ")){//Anio
                                    result.add("Year");
                                    formatMap=formatMap.substring(2);
                                }else{//para separadores:
                                    if (formatMap.charAt(1)==' ' ){
                                        try{
                                            result.add(formatMap.substring(0,2));
                                            formatMap=formatMap.substring(2);
                                        }catch(StringIndexOutOfBoundsException e){
                                            result.add(formatMap.substring(0));
                                            if (formatMap.length()==2)
                                            formatMap="";
                                        }
                                    }else{
                                        result.add(formatMap.charAt(0));
                                        if (formatMap.length()>1)
                                            formatMap=formatMap.substring(1);
                                    }
                                }
            }
            if(formatMap.length()==1){
                result.add(formatMap);
                formatMap="";
            }
        }


        return result;
    }
    
    private void botonOKPesosParaNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOKPesosParaNodoActionPerformed
        // TODO add your handling code here:
        try{
            PesosParaNodoWindow.setVisible(false);
            if( Integer.parseInt(pesoTotalTxt.getText() )==100){
                nodeWeightMap.put(tablaCitas.getColumnName(tablaCitas.getSelectedColumn()), nodeWeight);//almacena en el hashmap el vector de pesos del nodo
                    nodeFormatExampleTxt.setForeground(Color.black);
            }
            else{
                nodeWeightMap.put(tablaCitas.getColumnName(tablaCitas.getSelectedColumn()), lastWeight);//almacena en el hashmap el vector de pesos del nodo inicial
            }
            jButton1.setEnabled(true);
        }catch(NumberFormatException e){
        }
    }//GEN-LAST:event_botonOKPesosParaNodoActionPerformed



    private void tablaCitasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitasMouseReleased
        // TODO add your handling code here:
        PesosParaNodoWindow.setVisible(false);
        ReglasPorNodoWindow.setVisible(false);
        labelErrorCita.setVisible(false);
try{
        //DOBLE CLICK PARA EDITAR EL ELEMENTO
        if ((evt.getClickCount()==2) &&!(evt.getButton()==MouseEvent.BUTTON3) ){

            //tablaCitas.getColumnName( tablaCitas.getEditingColumn() );



        msgRsrcButtons=new Vector();


        //ajustando la vista y habilitando botones necesarios
        nodeFormat=new Vector();
        nodeExampleTxt.setText("");
        nodeExample="";
        buildNodeTable();
        enableAllFormatButtons();

        //detectando el tipo de nodo
        if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Autor") ){
            nodeCode=1;
        }
        if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Fecha") ){
            nodeCode=2;
        }
        if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Titulo") ){
            nodeCode=3;
        }
        if( (  (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Editorial") ){
            nodeCode=4;
        }
        if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Lugar") ){
            nodeCode=5;
        }
        if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Pag") ){
            nodeCode=6;
        }
        if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Volumen") ){
            nodeCode=7;
        }

        //Obtiene los mensajes propios del nodo seleccionado
        msgRsrcButtons=messageResources(nodeCode);

        //Asigna las etiquetas a su boton correspondiente
        botonPredef8.setText( ((String)msgRsrcButtons.elementAt(19))  );
        botonPredef9.setText( ((String)msgRsrcButtons.elementAt(21))  );

        if ( (botonPredef8.getText().equals("Day")) && (botonPredef9.getText().equals("Year"))){
            //botonPredef8.setEnabled(true);
            //botonPredef9.setEnabled(true);
            botonPredef8.setVisible(true);
            botonPredef9.setVisible(true);
        }else{
            botonPredef8.setVisible(false);
            botonPredef9.setVisible(false);
        }
        if(nodeCode==1)
            botonAddNumber.setVisible(false);
            

        //Deshabilitar addNumero si el nodo es una fecha
        if( nodeCode==2 ){
            botonAddNumber.setEnabled(false);
        }
        ReglasPorNodoWindow.setTitle("Modificando: "+ tablaCitas.getColumnName(tablaCitas.getSelectedColumn()) );
        ReglasPorNodoWindow.setVisible(true);

        tablaCitas.getCellEditor().cancelCellEditing();

        }// FIN DOBLE CLICK


//**************************************** CLICK! ********************************************************
        
        //para un solo click
        if (evt.getClickCount()==1){

            String temp=(String) (nodeFormatsMap.get( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ));

            //detectando el tipo de nodo
            if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Autor") ){
                nodeCode=1;
            }
            if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Fecha") ){
                nodeCode=2;
            }
            if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Titulo") ){
                nodeCode=3;
            }
            if( (  (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Editorial") ){
                nodeCode=4;
            }
            if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Lugar") ){
                nodeCode=5;
            }
            if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Pag") ){
                nodeCode=6;
            }
            if( ( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) ).startsWith("Volumen") ){
                nodeCode=7;
            }

            nodeFormatExampleTxt.setText("");

            if(temp!=null){
                nodeFormatExampleTxt.setText( mixMsgResources(temp,messageResources(nodeCode)) );                
//System.out.println("clave (nodeformat): "+temp);
            }
            if (nodeFormatExampleTxt.getText().equals("")){
                PesosParaNodoWindow.setVisible(false);
            }

            //Checking if the selected node has assigned Weight Values
            if (nodeWeightMap.get(tablaCitas.getColumnName(tablaCitas.getSelectedColumn()))!=null ){
                nodeFormatExampleTxt.setForeground(Color.black);
            }else{
                nodeFormatExampleTxt.setForeground(Color.red);
            }



        }//FIN UN SOLO CLICK


//*********************************** RIGHT CLICK! ***************************************************************

        if(evt.getButton()==MouseEvent.BUTTON3){
            //rebuilding citTable
            Vector citAux=new Vector();
            for (int i=0; i<citNodes.size();i++){
                    for(int j=0;j<citNodes.size();j++){
                        if(  ((String)citNodes.elementAt(j)).startsWith(tablaCitas.getColumnName(i))){
                                citAux.add(citNodes.elementAt(j));
                                break;
                        }
                    }
            }
        citNodes=citAux;
        buildCitTable();
        
        //se llama a selectedType & selectedFormat para los tipos y formatos correspondientes
        //ademas de una bandera para controlar si es actualizacion o nuevo
        if (true){ //Llamada a metodo de control - saveCitationTemplate returns true, false
            labelErrorCita.setForeground(Color.BLACK);
            labelErrorCita.setText("Los cambios se han almacenado satisfactioramente");
            labelErrorCita.setVisible(true);
            comboTipo.setEnabled(true);
            comboFormato.setEnabled(true);
        }
        else{
            labelErrorCita.setForeground(Color.RED);
            labelErrorCita.setText("Ocurrio un error al guardar los cambios");
            labelErrorCita.setVisible(true);
            comboTipo.setEnabled(true);
            comboFormato.setEnabled(true);
        }

        }
        
}catch(Exception e){
e.printStackTrace();
}

    }//GEN-LAST:event_tablaCitasMouseReleased

    private void comboFormatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFormatoActionPerformed
        // TODO add your handling code here:
System.out.println("Combo formato: Click!");

        selectedType=(String)comboTipo.getSelectedItem();
        selectedFormat=(String)comboFormato.getSelectedItem();
        //llamada a control - metodo que devuelva el template en forma de String - getDefinedCitationString()
        //el metodo debera recibir tipo de medio y formato de cita
        splitDefinedCitation(getDefinedCitationString());
        buildCitTable();
        if(getDefinedCitationMaps()){
            return;
        }else
            nodeFormatsMap.clear();//limpia los formatos si no hay un valor precargado
    }//GEN-LAST:event_comboFormatoActionPerformed


    private void menuItemKBTitulosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemKBTitulosActionPerformed
        try{
            LinkedList lista = control.retrieveAllTitles();
            this.listaDeEntidades.setListData(lista.toArray());
            this.KBWindow.setTitle("Titulos");
            this.KBWindow.pack();
            this.KBWindow.setVisible(true);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "La configuración del servidor no es correcta,\nrevise las preferencias en el menu 'edit'.");
        }

    }//GEN-LAST:event_menuItemKBTitulosActionPerformed

    private void menuItemKBLugaresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemKBLugaresActionPerformed
        try{
            LinkedList<Location> lista = control.retrieveAllLocations();
            this.listaDeEntidades.setListData(lista.toArray());
            this.KBWindow.setTitle("Lugares");
            this.KBWindow.pack();
            this.KBWindow.setVisible(true);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "La configuración del servidor no es correcta,\nrevise las preferencias en el menu 'edit'.");
        }

    }//GEN-LAST:event_menuItemKBLugaresActionPerformed

    private void BotonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAgregarActionPerformed
        if(this.KBWindow.getTitle().equals("Editoriales")){
            this.AgregarWindow.setTitle("Agregar Editorial");
            this.AgregarWindow.pack();
            etiqueta.setText("Editorial :");
            this.AgregarWindow.setVisible(true);
        }else{
            if(this.KBWindow.getTitle().equals("Titulos")){
                this.AgregarWindow.setTitle("Agregar Titulo");
                this.AgregarWindow.pack();
                etiqueta.setText("Titulo :");
                this.AgregarWindow.setVisible(true);
            }else{
                if(this.KBWindow.getTitle().equals("Lugares")){
                    this.AgregarWindow.setTitle("Agregar Lugar");
                    this.AgregarWindow.pack();
                    etiqueta.setText("Lugar :");
                    this.AgregarWindow.setVisible(true);
                }else{
                    this.AgregarWindow.setTitle("Agregar Autor");
                    this.AgregarWindow.pack();
                    etiqueta.setText("Nombre/Apellido :");
                    this.AgregarWindow.setVisible(true);
                }
            }
        }
}//GEN-LAST:event_BotonAgregarActionPerformed

    private void BotonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEliminarActionPerformed
        String valueSelected = (String) this.listaDeEntidades.getSelectedValue();

        if(KBWindow.getTitle().equals("Editoriales")){
            control.deletePublisher(valueSelected);
            LinkedList listaEditoriales = control.retrieveAllPublishers();
            this.listaDeEntidades.setListData(listaEditoriales.toArray());
        }else{
            if(KBWindow.getTitle().equals("Autores")){
                control.deleteAuthor(valueSelected);
                LinkedList listaAutores = control.retrieveAllAuthors();
                this.listaDeEntidades.setListData(listaAutores.toArray());
            }else{
                if(KBWindow.getTitle().equals("Titulos")){
                    control.deleteTitle(valueSelected);
                    LinkedList listaTitulos = control.retrieveAllTitles();
                    this.listaDeEntidades.setListData(listaTitulos.toArray());
                }else{
                    control.deleteLocation(valueSelected);
                    LinkedList listaLugares = control.retrieveAllLocations();
                    this.listaDeEntidades.setListData(listaLugares.toArray());
                }
            }
        }
    }//GEN-LAST:event_BotonEliminarActionPerformed

    private void BotonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarActionPerformed
        String value = TextFieldAgregar.getText();
        if(AgregarWindow.getTitle().equals("Agregar Editorial")){

            if(TextFieldAgregar.getText().equals("")){
                JOptionPane.showMessageDialog(this, "El registro esta vacio");
            }else{
                control.savePublisher(value);
                JOptionPane.showMessageDialog(this, "El registro se guardo correctamente");
                TextFieldAgregar.setText("");
                AgregarWindow.setVisible(false);
                LinkedList listaEditoriales = control.retrieveAllPublishers();
                this.listaDeEntidades.setListData(listaEditoriales.toArray());
            }

        }

        if(AgregarWindow.getTitle().equals("Agregar Titulo")){

                if(TextFieldAgregar.getText().equals("")){
                    JOptionPane.showMessageDialog(this, "El registro esta vacio");
                }else{
                    control.saveTitle(value);
                    JOptionPane.showMessageDialog(this, "El registro se guardo correctamente");
                    TextFieldAgregar.setText("");
                    AgregarWindow.setVisible(false);
                    LinkedList listaTitulos = control.retrieveAllTitles();
                    this.listaDeEntidades.setListData(listaTitulos.toArray());
                }

            }

        if(AgregarWindow.getTitle().equals("Agregar Autor")){

                    if(TextFieldAgregar.getText().equals("")){
                        JOptionPane.showMessageDialog(this, "El registro esta vacio");
                    }else{
                        control.saveAuthor(value);
                        JOptionPane.showMessageDialog(this, "El registro se guardo correctamente");
                        TextFieldAgregar.setText("");
                        AgregarWindow.setVisible(false);
                        LinkedList listaAutores = control.retrieveAllAuthors();
                        this.listaDeEntidades.setListData(listaAutores.toArray());
                    }

        }

        if(AgregarWindow.getTitle().equals("Agregar Lugar")){
            if(TextFieldAgregar.getText().equals("")){
                        JOptionPane.showMessageDialog(this, "El registro esta vacio");
            }else{
                        control.saveLocation(value);
                        JOptionPane.showMessageDialog(this, "El registro se guardo correctamente");
                        TextFieldAgregar.setText("");
                        AgregarWindow.setVisible(false);
                        LinkedList listaLugares = control.retrieveAllLocations();
                        this.listaDeEntidades.setListData(listaLugares.toArray());
                    }
                }
            
        
    }//GEN-LAST:event_BotonGuardarActionPerformed
    /**
     * Calculates the total weight of elements in the current node
     */
    public void calculeTotalWeight(){
        int total=0;
        for (int i=0; i<nodeWeight.size();i++){
            total+= Integer.parseInt( String.valueOf( nodeWeight.elementAt(i)) );
        }
        pesoTotalTxt.setText(String.valueOf(total) );
    }

    private void pesoElemNodoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesoElemNodoTxtActionPerformed
        // TODO add your handling code here:
        try{
            if(Integer.parseInt(pesoElemNodoTxt.getText())>100){
                pesoElemNodoTxt.setText("");
                return;
            }else
            if(!(Integer.parseInt(pesoElemNodoTxt.getText())>100-(nodeWeight.size()-1)) &&!( (Integer.parseInt(pesoTotalTxt.getText())+(Integer.parseInt(pesoElemNodoTxt.getText()))   -(      Integer.parseInt( String.valueOf( nodeWeight.elementAt(tablaElementos.getSelectedColumn()) ) )        ) )>100 ))
                nodeWeight.setElementAt( Integer.parseInt(pesoElemNodoTxt.getText()) , tablaElementos.getSelectedColumn());
            else
                pesoElemNodoTxt.setText("");
            calculeTotalWeight();
        }catch(ArrayIndexOutOfBoundsException e){
        }catch(NumberFormatException e){
            pesoElemNodoTxt.setText("");
        }
    }//GEN-LAST:event_pesoElemNodoTxtActionPerformed

    private void tablaElementosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaElementosMouseReleased
        // TODO add your handling code here:
        try{
//System.out.println("nodeWeight tabElem -mouse: "+nodeWeight);
//System.out.println("selectedcolumn tabElem -mouse: "+tablaElementos.getSelectedColumn());
            pesoElemNodoTxt.setText( String.valueOf(nodeWeight.elementAt( tablaElementos.getSelectedColumn() ) ) );
            selectedElementLabel.setText(tablaElementos.getColumnName(tablaElementos.getSelectedColumn()));
            calculeTotalWeight();
        }catch(ArrayIndexOutOfBoundsException e){
        }
    }//GEN-LAST:event_tablaElementosMouseReleased


    public void cargarPesos(){
        try{
            Vector nodeComponents = splitNodeFormat( (String) (nodeFormatsMap.get( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) )) );
            if (nodeComponents==null)
                return;

            nodeWeight=new Vector();
            if(nodeWeightMap.get(tablaCitas.getColumnName(tablaCitas.getSelectedColumn()))==null ){
                for (int i=0; i<nodeComponents.size(); i++){
                    nodeWeight.add(0);//se crea un valor para cada componente del nodo
                    lastWeight=null;//no existen pesos anteriores
                }
            }else{
                lastWeight=new Vector();
                nodeWeight= ((Vector)nodeWeightMap.get(tablaCitas.getColumnName(tablaCitas.getSelectedColumn())));
                for (int i=0; i<nodeWeight.size();i++){
                    lastWeight.add(nodeWeight.elementAt(i));

                }
//System.out.println("boton1 nodeweight: "+nodeWeight);

            }
            buildElementTable();
            pesoTotalTxt.setText("");
            pesoElemNodoTxt.setText("");
            selectedElementLabel.setText("<Ninguno>");
            PesosParaNodoWindow.setVisible(true);
        }catch(Exception e){
            System.out.println("cargar pesos.error: ");
            e.printStackTrace();
        }
    }

    private void botonPesosDefectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPesosDefectoActionPerformed
        // TODO add your handling code here:
        int result;
        try{
            result=100/(nodeWeight.size());
                for(int i=0; i<nodeWeight.size();i++){
                    nodeWeight.setElementAt(result, i);
                }
        }catch(ArithmeticException e){
        }
        calculeTotalWeight();

    }//GEN-LAST:event_botonPesosDefectoActionPerformed

    private void citasComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_citasComponentShown
        currentPage = 0;
        if(this.listaDeCitas.size()==0){
            JOptionPane.showMessageDialog(this,"No has selecionado ninguna referencia. Favor de regresar a la pastaña anterior y seleccionar al menos una!","El raton se callo de la rueda",JOptionPane.WARNING_MESSAGE);
        }else{
<<<<<<< .mine
            temporalReferences = this.control.findCitations(this.listaDeCitas, this.typeOfCitationCombo.getSelectedItem().toString());
            if(temporalReferences != null){
                System.out.println("Fue loosser reference: "+temporalReferences.getFirst().isIsLooserReference());
                this.originalReferenceTextArea.setText(temporalReferences.getFirst().getOriginalReference());
                this.counterLabelFoundReferences.setText(currentPage+1+"/"+temporalReferences.size());
                if(temporalReferences.getFirst().getAutors()!=null)
                    this.authorFoundReferencesTextArea.setText(temporalReferences.getFirst().getAutors().toString());
                if(temporalReferences.getFirst().getTitle()!=null)
                    this.titleFoundReferencesTextField.setText(temporalReferences.getFirst().getTitle().toString());
                if(temporalReferences.getFirst().getDate()!= null)
                    this.dateFoundReferencesTextField.setText(temporalReferences.getFirst().getDate().toString());
                if(temporalReferences.getFirst().getExtra()!=null)
                    this.extraFoundReferencesTextArea.setText(temporalReferences.getFirst().getExtra());
                if(temporalReferences.getFirst().getLocation() != null)
                    this.locationFoundReferencesTextField.setText(temporalReferences.getFirst().getLocation().toString());
                if(temporalReferences.getFirst().getPublisher() != null)
                    this.publisherFoundReferencesTextField.setText(temporalReferences.getFirst().getPublisher().toString());
                if(temporalReferences.getFirst().getPages() != null)
                    this.pagesFoundReferencesTextField.setText(temporalReferences.getFirst().getPages().toString());
                if(temporalReferences.getFirst().getVolume()!= null)
                    this.volumeFoundReferencesteTextField.setText(temporalReferences.getFirst().getVolume().toString());
            }

=======
            this.control.findCitations(this.listaDeCitas, this.typeOfCitationCombo.getSelectedItem().toString());
>>>>>>> .r288
        }
    }//GEN-LAST:event_citasComponentShown

    private void botonNuevaCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevaCitaActionPerformed
        // TODO add your handling code here:
        addAuthor.setEnabled(true);
        addDate.setEnabled(true);
        addTitle.setEnabled(true);
        addPlace.setEnabled(true);
        addVolume.setEnabled(true);
        addPage.setEnabled(true);
        addPublisher.setEnabled(true);

        FormatoCitaWindow.setVisible(true);

        citNodes=new Vector();
        nodeWeightMap.clear();
        nodeFormatsMap.clear();
        nodeFormatExampleTxt.setText("");
    }//GEN-LAST:event_botonNuevaCitaActionPerformed

    private void nodeFormatExampleTxtMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nodeFormatExampleTxtMouseReleased
        // TODO add your handling code here:
        if ( (evt.getClickCount()==2)  && (nodeFormatExampleTxt.getText().length()>0) )
                try{
                    Vector nodeComponents = splitNodeFormat( (String) (nodeFormatsMap.get( (String) tablaCitas.getColumnName( tablaCitas.getSelectedColumn() ) )) );
                    if (nodeComponents==null)
                        return;

                    nodeWeight=new Vector();
                    if(nodeWeightMap.get(tablaCitas.getColumnName(tablaCitas.getSelectedColumn()))==null ){
                        for (int i=0; i<nodeComponents.size(); i++){
                            nodeWeight.add(0);//se crea un valor para cada componente del nodo
                            lastWeight=null;//no existen pesos anteriores
                        }
                    }else{
                        lastWeight=new Vector();
                        nodeWeight= ((Vector)nodeWeightMap.get(tablaCitas.getColumnName(tablaCitas.getSelectedColumn())));
                        for (int i=0; i<nodeWeight.size();i++){
                            lastWeight.add(nodeWeight.elementAt(i));
                        }
//System.out.println("boton1 nodeweight: "+nodeWeight);

                    }//fin else
                    buildElementTable();
                    pesoTotalTxt.setText("");
                    pesoElemNodoTxt.setText("");
                    selectedElementLabel.setText("<Ninguno>");
                    PesosParaNodoWindow.setVisible(true);
                }catch(Exception e){
                    System.out.println("pesos activation. error: ");
                    e.printStackTrace();
                }//fin catch

    }//GEN-LAST:event_nodeFormatExampleTxtMouseReleased

    private void MenuItemPreferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemPreferenciasActionPerformed
        
        OswaReader reader = new OswaReader();
        this.ConfigWindow.setTitle("Preferencias");
        this.ConfigWindow.pack();
        TextFieldHost.setText(reader.getPropiedad("HOST"));
        TextFieldPort.setText(reader.getPropiedad("PORT"));
        TextFieldUser.setText(reader.getPropiedad("USER"));
        PasswordFieldPass.setText(reader.getPropiedad("PASS"));
        this.GuardarConfig.setEnabled(false);
        this.ConfigWindow.setVisible(true);
        
    }//GEN-LAST:event_MenuItemPreferenciasActionPerformed

    private void GuardarConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarConfigActionPerformed
        
        //OswaReader reader = new OswaReader();
        String user = TextFieldUser.getText();
        String host = TextFieldHost.getText();
        String port = TextFieldPort.getText();
        String pass = PasswordFieldPass.getText();
        
        if(TextFieldUser.isEditable()){
            OswaReader reader=new OswaReader();
                String cambios = host+","+port+","+user+","+pass;
                reader.saveConfig(cambios);
                this.GuardarConfig.setEnabled(false);           
        }else{
            JOptionPane.showMessageDialog(this, "No se ha guardado nada");
        }            
        
    }//GEN-LAST:event_GuardarConfigActionPerformed

    private void BotonSalirConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSalirConfigActionPerformed
        
        
        this.ConfigWindow.setVisible(false);
    }//GEN-LAST:event_BotonSalirConfigActionPerformed

    private void BotonSalirKBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSalirKBActionPerformed
        
        this.KBWindow.show(false);
    }//GEN-LAST:event_BotonSalirKBActionPerformed

    private void ConfigWindowComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ConfigWindowComponentShown
        

            TextFieldUser.getDocument().addDocumentListener(new DocumentListener(){

                public void insertUpdate(DocumentEvent e) {
                    GuardarConfig.setEnabled(true);
                }

                public void removeUpdate(DocumentEvent e) {
                    GuardarConfig.setEnabled(true);
                }

                public void changedUpdate(DocumentEvent e) {
                    GuardarConfig.setEnabled(true);
                }

            });
            TextFieldHost.getDocument().addDocumentListener(new DocumentListener(){

            public void insertUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            public void removeUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            public void changedUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            });
            TextFieldPort.getDocument().addDocumentListener(new DocumentListener(){

            public void insertUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            public void removeUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            public void changedUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            });
            PasswordFieldPass.getDocument().addDocumentListener(new DocumentListener(){

            public void insertUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            public void removeUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            public void changedUpdate(DocumentEvent e) {
                GuardarConfig.setEnabled(true);
            }

            });
        
    }//GEN-LAST:event_ConfigWindowComponentShown

    private void newCitationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCitationActionPerformed
        // TODO add your handling code here:
        String selectedText = this.textPaneReferencias.getSelectedText();
        this.listaDeCitas.add(selectedText);
        LouhiHighlighter lh = new LouhiHighlighter(this.textPaneReferencias);
        lh.search(selectedText);

    }//GEN-LAST:event_newCitationActionPerformed

    private void clearButtonReferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonReferenciasActionPerformed
        this.listaDeCitas = new LinkedList<String>();
        LouhiHighlighter lh = new LouhiHighlighter(this.textPaneReferencias);
        lh.clearHightlight();
    }//GEN-LAST:event_clearButtonReferenciasActionPerformed

    private void nextButtonfoundReferences(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonfoundReferences
        currentPage++;
        if(currentPage> temporalReferences.size()-1){
            //se llego al final, preguntar si se esta seguro que quiere terminar
            currentPage= temporalReferences.size()-1;
        }else{
            modelo.TemporalReference tr = temporalReferences.get(currentPage);
            if(tr != null){
                this.cleanGUI();
                System.out.println("Fue loosser reference: "+tr.isIsLooserReference());
                this.counterLabelFoundReferences.setText(currentPage+1+"/"+temporalReferences.size());
                this.originalReferenceTextArea.setText(tr.getOriginalReference());
                if(tr.getAutors()!=null)
                    this.authorFoundReferencesTextArea.setText(tr.getAutors().toString());
                if(tr.getTitle()!=null)
                    this.titleFoundReferencesTextField.setText(tr.getTitle().toString());
                if(tr.getDate()!= null)
                    this.dateFoundReferencesTextField.setText(tr.getDate().toString());
                if(tr.getExtra()!=null)
                    this.extraFoundReferencesTextArea.setText(tr.getExtra());
                if(tr.getLocation() != null)
                    this.locationFoundReferencesTextField.setText(tr.getLocation().toString());
                if(tr.getPublisher() != null)
                    this.publisherFoundReferencesTextField.setText(tr.getPublisher().toString());
                if(tr.getPages() != null)
                    this.pagesFoundReferencesTextField.setText(tr.getPages().toString());
                if(tr.getVolume()!= null)
                    this.volumeFoundReferencesteTextField.setText(tr.getVolume().toString());
            }
        }
    }//GEN-LAST:event_nextButtonfoundReferences

    private void previewsButtonFoundReferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewsButtonFoundReferencesActionPerformed
        currentPage--;
        if(currentPage >= 0 ){
            modelo.TemporalReference tr = temporalReferences.get(currentPage);
            if(tr != null){
                this.cleanGUI();
                System.out.println("Fue loosser reference: "+tr.isIsLooserReference());
                this.counterLabelFoundReferences.setText(currentPage+1+"/"+temporalReferences.size());
                this.originalReferenceTextArea.setText(tr.getOriginalReference());
                if(tr.getAutors()!=null)
                    this.authorFoundReferencesTextArea.setText(tr.getAutors().toString());
                if(tr.getTitle()!=null)
                    this.titleFoundReferencesTextField.setText(tr.getTitle().toString());
                if(tr.getDate()!= null)
                    this.dateFoundReferencesTextField.setText(tr.getDate().toString());
                if(tr.getExtra()!=null)
                    this.extraFoundReferencesTextArea.setText(tr.getExtra());
                if(tr.getLocation() != null)
                    this.locationFoundReferencesTextField.setText(tr.getLocation().toString());
                if(tr.getPublisher() != null)
                    this.publisherFoundReferencesTextField.setText(tr.getPublisher().toString());
                if(tr.getPages() != null)
                    this.pagesFoundReferencesTextField.setText(tr.getPages().toString());
                if(tr.getVolume()!= null)
                    this.volumeFoundReferencesteTextField.setText(tr.getVolume().toString());
            }
        }else{
            currentPage=0;
        }
    }//GEN-LAST:event_previewsButtonFoundReferencesActionPerformed

    private void authorFoundReferencesOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorFoundReferencesOKActionPerformed
        this.authorFoundReferencesTextArea.setBackground(Color.GREEN);
    }//GEN-LAST:event_authorFoundReferencesOKActionPerformed

    private void titleFoundReferencesOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleFoundReferencesOKActionPerformed
        this.titleFoundReferencesTextField.setBackground(Color.GREEN);
    }//GEN-LAST:event_titleFoundReferencesOKActionPerformed

    private void publisherFoundReferencesOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publisherFoundReferencesOkActionPerformed
        this.publisherFoundReferencesTextField.setBackground(Color.GREEN);
    }//GEN-LAST:event_publisherFoundReferencesOkActionPerformed

    private void dateFoundReferencesOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFoundReferencesOkActionPerformed
        this.dateFoundReferencesTextField.setBackground(Color.GREEN);
    }//GEN-LAST:event_dateFoundReferencesOkActionPerformed

    private void pagesFoundReferencesOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagesFoundReferencesOkActionPerformed
        this.pagesFoundReferencesTextField.setBackground(Color.GREEN);
    }//GEN-LAST:event_pagesFoundReferencesOkActionPerformed

    private void volumeFoundReferencesOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeFoundReferencesOkActionPerformed
        this.volumeFoundReferencesteTextField.setBackground(Color.GREEN);
    }//GEN-LAST:event_volumeFoundReferencesOkActionPerformed

    private void locationFoundReferencesOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationFoundReferencesOkActionPerformed
        this.locationFoundReferencesTextField.setBackground(Color.GREEN);
    }//GEN-LAST:event_locationFoundReferencesOkActionPerformed

    /**
     * Limpia las interfaces donde se despliegan las cosas
     */
    public void cleanGUI() {
        this.authorFoundReferencesTextArea.setBackground(Color.WHITE);
        this.titleFoundReferencesTextField.setBackground(Color.WHITE);
        this.dateFoundReferencesTextField.setBackground(Color.WHITE);
        this.extraFoundReferencesTextArea.setBackground(Color.WHITE);
        this.locationFoundReferencesTextField.setBackground(Color.WHITE);
        this.publisherFoundReferencesTextField.setBackground(Color.WHITE);
        this.pagesFoundReferencesTextField.setBackground(Color.WHITE);
        this.volumeFoundReferencesteTextField.setBackground(Color.WHITE);

    }


    /**
     * Disables the format buttons and predef buttons of the Window RulesByNode "ReglasPorNodoWindow"
     */

    public void disableAllFormatButtons(){
        botonAddSeparator.setEnabled(false);
        botonAddUpper.setEnabled(false);
        botonAddLower.setEnabled(false);
        botonAddNumber.setEnabled(false);
        botonPredef8.setEnabled(false);
        botonPredef9.setEnabled(false);
    }

/**
 * Enables the format buttons of the Window RulesByNode "ReglasPorNodoWindow"
 */

    public void enableFormatButtons(){
        botonAddSeparator.setEnabled(true);
        botonAddUpper.setEnabled(true);
        botonAddLower.setEnabled(true);
        botonAddNumber.setEnabled(true);
    }

/**
 * Disables the predefined sentence buttons of the Window RulesByNode "ReglasPorNodoWindow"
 */

    public void disablePredefButtons(){
        botonPredef8.setEnabled(false);
        botonPredef9.setEnabled(false);
    }
/**
 * Enables the predefined sentence buttons of the Window RulesByNode "ReglasPorNodoWindow"
 */
    public void enablePredefButtons(){
        botonPredef8.setEnabled(true);
        botonPredef9.setEnabled(true);
    }

/**
 * Enables the format buttons and predef buttons of the Window RulesByNode "ReglasPorNodoWindow"
 */

    public void enableAllFormatButtons(){
        botonAddSeparator.setEnabled(true);
        botonAddUpper.setEnabled(true);
        botonAddLower.setEnabled(true);
        botonAddNumber.setEnabled(true);
        botonPredef8.setEnabled(true);
        botonPredef9.setEnabled(true);
    }
    

/**
 * Obtains a String representing a citation template - must be control's layer
 * @return
 */

    public String getDefinedCitationString(){
        String citationPattern="Autor.Fecha.Titulo.Volumen/Paginas.Lugar/Editorial.";
        return citationPattern;
    }


    /**
     * Obtains the specific weights for each node in the current citation format
     * returns true if value is found
     * @return
     */
    public boolean getDefinedCitationMaps(){
        HashMap weights =new HashMap();//almacenara temporalmente los pesos de los nodos, si existen
        HashMap formats= new HashMap();//almacenara temporalmente los nodos, si existen
        //aqui se llenan los mapas con una llamada a control, con otro hashmap, respectivamente
        //tentativo weights= getWeightsMap(); weightsMap=HashMap(String, Vector(int));
        //tentativo formats= getFormatsMap(); formatsMap=HashMap(String,String);
        
        formats.put("Autor", "A , A .");
        Vector vc=new Vector();
        vc.add(25);vc.add(25);vc.add(25);vc.add(25);
        weights.put("Autor", null);
        
        formats.put("Fecha", "A , Y ");
        vc=new Vector();
        vc.add(34);vc.add(33);vc.add(33);
        weights.put("Fecha", vc);

        formats.put("Titulo", "A ");
        vc=new Vector();
        vc.add(100);
        weights.put("Titulo", null);
        
        formats.put("Volumen", "A , N ");
        vc=new Vector();
        vc.add(33);vc.add(34);vc.add(33);
        weights.put("Volumen", null);

        formats.put("Paginas", "A N ");
        vc=new Vector();
        vc.add(50);vc.add(50);
        weights.put("Paginas", null);

        formats.put("Lugar", "A , A ");
        vc=new Vector();
        vc.add(33);vc.add(33);vc.add(34);
        weights.put("Lugar", null);

        formats.put("Editorial", "A ");
        vc=new Vector();
        vc.add(100);
        weights.put("Editorial", vc);
        //Fin simulacion de llamada a control - se sustituye por asignacion

        //valida que formats y weights contengan algo, y ademas su tamaño sea el mismo
        if  (!(formats.isEmpty())&&!(weights.isEmpty()) &&(formats.size()==weights.size()) ){
            nodeFormatsMap=formats;
            nodeWeightMap=weights;
            return true;
        }
        return false;
    }

    public Vector getWeight(String keyNode){
        Vector aux=new Vector();

        return aux;
    }




/**
 * Divides a String in an specific format, to get the differents nodes acording to an specific template
 * @param citPattern
 */

    public void splitDefinedCitation(String citPattern){
        boolean next=true;
        citNodes=new Vector();
        
        while(next){

            if(citPattern.startsWith("Autor")){
                citNodes.add(citPattern.substring(0,6));
                citPattern=citPattern.substring(6);
                if(citPattern.length()<0)
                    next=true;

            }else

            if(citPattern.startsWith("Fecha")){
                citNodes.add(citPattern.substring(0,6));
                citPattern=citPattern.substring(6);
                if(citPattern.length()<0)
                    next=true;
            }else

            if(citPattern.startsWith("Lugar")){
                citNodes.add(citPattern.substring(0,6));
                citPattern=citPattern.substring(6);
                if(citPattern.length()<0)
                    next=true;
            }else

            if(citPattern.startsWith("Volumen")){
                citNodes.add(citPattern.substring(0,8));
                citPattern=citPattern.substring(8);
                if(citPattern.length()<0)
                    next=true;
            }else

            if(citPattern.startsWith("Paginas")){
                citNodes.add(citPattern.substring(0,8));
                citPattern=citPattern.substring(8);
                if(citPattern.length()<0)
                    next=true;
            }else

            if(citPattern.startsWith("Titulo")){
                citNodes.add(citPattern.substring(0,7));
                citPattern=citPattern.substring(7);
                if(citPattern.length()<0)
                    next=true;
            }else

            if(citPattern.startsWith("Mayuscula")){
                citNodes.add(citPattern.substring(0,10));
                citPattern=citPattern.substring(10);
                if(citPattern.length()<0)
                    next=true;
            }else

            if(citPattern.startsWith("Minuscula")){
                citNodes.add(citPattern.substring(0,10));
                citPattern=citPattern.substring(10);
                if(citPattern.length()<0)
                    next=true;
            }else

            if(citPattern.startsWith("Editorial")){
                citNodes.add(citPattern.substring(0,10));
                citPattern=citPattern.substring(10);
                if(citPattern.length()<0)
                    next=true;
            }else
                next=false;
        }

        
    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame AgregarWindow;
    private javax.swing.JButton BotonAgregar;
    private javax.swing.JButton BotonEliminar;
    private javax.swing.JButton BotonGuardar;
    private javax.swing.JButton BotonSalirConfig;
    private javax.swing.JButton BotonSalirKB;
    private javax.swing.JFrame ConfigWindow;
    private javax.swing.JFrame FormatoCitaWindow;
    private javax.swing.JButton GuardarConfig;
    private javax.swing.JFrame KBWindow;
    private javax.swing.JMenu MenuEdit;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenuItem MenuItemPreferencias;
    private javax.swing.JMenuItem MenuOpenPDF;
    private javax.swing.JMenuItem MenuSalir;
    private javax.swing.JPasswordField PasswordFieldPass;
    private javax.swing.JFrame PesosParaNodoWindow;
    private javax.swing.JFrame ReglasPorNodoWindow;
    private javax.swing.JFrame ReglasWindow;
    private javax.swing.JFrame SeparadorWindow;
    private javax.swing.JTextField TextFieldAgregar;
    private javax.swing.JTextField TextFieldHost;
    private javax.swing.JTextField TextFieldPort;
    private javax.swing.JTextField TextFieldUser;
    private javax.swing.JButton addAuthor;
    private javax.swing.JButton addDate;
    private javax.swing.JButton addPage;
    private javax.swing.JButton addPlace;
    private javax.swing.JButton addPublisher;
    private javax.swing.JButton addTitle;
    private javax.swing.JButton addVolume;
    private javax.swing.JTextArea areaRawData;
    private javax.swing.JButton authorFoundReferencesOK;
    private javax.swing.JTextArea authorFoundReferencesTextArea;
    private javax.swing.JButton authorFoundReferencesWRONG;
    private javax.swing.JButton botonAddLower;
    private javax.swing.JButton botonAddNumber;
    private javax.swing.JButton botonAddSeparator;
    private javax.swing.JButton botonAddUpper;
    private javax.swing.JButton botonNuevaCita;
    private javax.swing.JButton botonNuevoTipoCita;
    private javax.swing.JButton botonOKPesosParaNodo;
    private javax.swing.JButton botonPesosDefecto;
    private javax.swing.JButton botonPredef8;
    private javax.swing.JButton botonPredef9;
    private javax.swing.JButton clearButtonReferencias;
    private javax.swing.JButton closeControls;
    private javax.swing.JComboBox comboFormato;
    private javax.swing.JComboBox comboTipo;
    private javax.swing.JComboBox comboTipoMedio;
    private javax.swing.JComboBox comboTiposCitas;
    private javax.swing.JLabel counterLabelFoundReferences;
    private javax.swing.JButton dateFoundReferencesOk;
    private javax.swing.JTextField dateFoundReferencesTextField;
    private javax.swing.JButton dateFoundReferencesWrong;
    private javax.swing.JLabel etiqueta;
<<<<<<< .mine
    private javax.swing.JTextArea extraFoundReferencesTextArea;
=======
    private javax.swing.JButton jButton1;
>>>>>>> .r288
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JLabel labelComponentsExample;
    private javax.swing.JLabel labelControlsHint;
    private javax.swing.JLabel labelElegido;
    private javax.swing.JLabel labelErrorCita;
    private javax.swing.JLabel labelErrorSep;
    private javax.swing.JLabel labelInstructionsCitation;
    private javax.swing.JLabel labelModifiquePeso;
    private javax.swing.JLabel labelNodeFormatExample;
    private javax.swing.JLabel labelPesoDeElemento;
    private javax.swing.JLabel labelPesoTotal;
    private javax.swing.JLabel labelSeleccioneImportancia;
    private javax.swing.JLabel labelSelectDefaultWeights;
    private javax.swing.JLabel labelSelectKind;
    private javax.swing.JLabel labelSelectNodeElements;
    private javax.swing.JLabel labelSelectOneNode;
    private javax.swing.JLabel labelSelectType;
    private javax.swing.JLabel labelSeparatorSelection;
    private javax.swing.JLabel labelSumaAdvert;
    private javax.swing.JLabel labelSumaMsg;
    private javax.swing.JList listaDeEntidades;
    private javax.swing.JButton locationFoundReferencesOk;
    private javax.swing.JTextField locationFoundReferencesTextField;
    private javax.swing.JButton locationFoundReferencesWrong;
    private javax.swing.JMenuItem menuItemKBAutores;
    private javax.swing.JMenuItem menuItemKBEditoriales;
    private javax.swing.JMenuItem menuItemKBLugares;
    private javax.swing.JMenuItem menuItemKBTitulos;
    private javax.swing.JMenu menuKB;
    private javax.swing.JMenuItem menuKBAutores;
    private javax.swing.JMenuItem menuKBReferencias;
    private javax.swing.JMenuBar menuPrincipal;
    private javax.swing.JMenu menuReglas;
    private javax.swing.JMenuItem newCitation;
    private javax.swing.JButton nextButtonFoundReferences;
    private javax.swing.JTextField nodeExampleTxt;
    private javax.swing.JTextField nodeFormatExampleTxt;
    private javax.swing.JTextField nuevoTipoCitaTxt;
    private javax.swing.JTextArea originalReferenceTextArea;
    private javax.swing.JButton pagesFoundReferencesOk;
    private javax.swing.JTextField pagesFoundReferencesTextField;
    private javax.swing.JButton pagesFoundReferencesWrong;
    private javax.swing.JPanel panelFoundReferences;
    private javax.swing.JPanel panelMetadata;
    private javax.swing.JPanel panelOpciones1;
    private javax.swing.JPanel panelOpciones2;
    private javax.swing.JPanel panelRawData;
    private javax.swing.JPanel panelReferenciasRAW;
    private javax.swing.JTextField pesoElemNodoTxt;
    private javax.swing.JTextField pesoTotalTxt;
    private javax.swing.JButton previewsButtonFoundReferences;
    private javax.swing.JButton publisherFoundReferencesOk;
    private javax.swing.JTextField publisherFoundReferencesTextField;
    private javax.swing.JButton publisherFoundReferencesWrong;
    private javax.swing.JLabel selectedElementLabel;
    private javax.swing.JButton separadorOK;
    private javax.swing.JTextField separadorTxt;
    private javax.swing.JTable tablaCitas;
    private javax.swing.JTable tablaElementos;
    private javax.swing.JTable tablaNodos;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextPane textPaneReferencias;
    private javax.swing.JTextField tfAutor;
    private javax.swing.JTextField tfCreador;
    private javax.swing.JTextField tfFechaDeCreacion;
    private javax.swing.JTextField tfFechaDeModificacion;
    private javax.swing.JTextField tfNumeroDePaginas;
    private javax.swing.JTextField tfPalabrasClave;
    private javax.swing.JTextField tfProductor;
    private javax.swing.JTextField tfTema;
    private javax.swing.JTextField tfTitulo;
    private javax.swing.JButton titleFoundReferencesOK;
    private javax.swing.JTextField titleFoundReferencesTextField;
    private javax.swing.JButton titleFoundReferencesWrong;
    private javax.swing.JComboBox typeOfCitationCombo;
    private javax.swing.JButton volumeFoundReferencesOk;
    private javax.swing.JButton volumeFoundReferencesWrong;
    private javax.swing.JTextField volumeFoundReferencesteTextField;
    // End of variables declaration//GEN-END:variables

}
